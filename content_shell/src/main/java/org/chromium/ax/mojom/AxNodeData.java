// AxNodeData.java is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     ui/accessibility/mojom/ax_node_data.mojom
//

package org.chromium.ax.mojom;

public final class AxNodeData extends org.chromium.mojo.bindings.Struct {

  private static final int STRUCT_SIZE = 104;
  private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
      new org.chromium.mojo.bindings.DataHeader[] {
        new org.chromium.mojo.bindings.DataHeader(104, 0)
      };
  private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
  public int id;
  public int role;
  public int state;
  public long actions;
  public java.util.Map<Integer, String> stringAttributes;
  public java.util.Map<Integer, Integer> intAttributes;
  public java.util.Map<Integer, Float> floatAttributes;
  public java.util.Map<Integer, Boolean> boolAttributes;
  public java.util.Map<Integer, int[]> intlistAttributes;
  public java.util.Map<Integer, String[]> stringlistAttributes;
  public java.util.Map<String, String> htmlAttributes;
  public int[] childIds;
  public AxRelativeBounds relativeBounds;

  private AxNodeData(int version) {
    super(STRUCT_SIZE, version);
  }

  public AxNodeData() {
    this(0);
  }

  public static AxNodeData deserialize(org.chromium.mojo.bindings.Message message) {
    return decode(new org.chromium.mojo.bindings.Decoder(message));
  }

  /**
   * Similar to the method above, but deserializes from a |ByteBuffer| instance.
   *
   * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
   */
  public static AxNodeData deserialize(java.nio.ByteBuffer data) {
    return deserialize(
        new org.chromium.mojo.bindings.Message(
            data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
  }

  @SuppressWarnings("unchecked")
  public static AxNodeData decode(org.chromium.mojo.bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    decoder0.increaseStackDepth();
    AxNodeData result;
    try {
      org.chromium.mojo.bindings.DataHeader mainDataHeader =
          decoder0.readAndValidateDataHeader(VERSION_ARRAY);
      final int elementsOrVersion = mainDataHeader.elementsOrVersion;
      result = new AxNodeData(elementsOrVersion);
      {
        result.id = decoder0.readInt(8);
      }
      {
        result.role = decoder0.readInt(12);
        Role.validate(result.role);
        result.role = Role.toKnownValue(result.role);
      }
      {
        result.state = decoder0.readInt(16);
      }
      {
        result.actions = decoder0.readLong(24);
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
        {
          decoder1.readDataHeaderForMap();
          int[] keys0;
          String[] values0;
          {
            keys0 =
                decoder1.readInts(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
                    org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            {
              for (int i2 = 0; i2 < keys0.length; ++i2) {
                StringAttribute.validate(keys0[i2]);
              }
            }
          }
          {
            org.chromium.mojo.bindings.Decoder decoder2 =
                decoder1.readPointer(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                    false);
            {
              org.chromium.mojo.bindings.DataHeader si2 =
                  decoder2.readDataHeaderForPointerArray(keys0.length);
              values0 = new String[si2.elementsOrVersion];
              for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {

                values0[i2] =
                    decoder2.readString(
                        org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                            + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2,
                        false);
              }
            }
          }
          result.stringAttributes = new java.util.HashMap<Integer, String>();
          for (int index0 = 0; index0 < keys0.length; ++index0) {
            result.stringAttributes.put(keys0[index0], values0[index0]);
          }
        }
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
        {
          decoder1.readDataHeaderForMap();
          int[] keys0;
          int[] values0;
          {
            keys0 =
                decoder1.readInts(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
                    org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            {
              for (int i2 = 0; i2 < keys0.length; ++i2) {
                IntAttribute.validate(keys0[i2]);
              }
            }
          }
          {
            values0 =
                decoder1.readInts(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                    org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                    keys0.length);
          }
          result.intAttributes = new java.util.HashMap<Integer, Integer>();
          for (int index0 = 0; index0 < keys0.length; ++index0) {
            result.intAttributes.put(keys0[index0], values0[index0]);
          }
        }
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
        {
          decoder1.readDataHeaderForMap();
          int[] keys0;
          float[] values0;
          {
            keys0 =
                decoder1.readInts(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
                    org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            {
              for (int i2 = 0; i2 < keys0.length; ++i2) {
                FloatAttribute.validate(keys0[i2]);
              }
            }
          }
          {
            values0 =
                decoder1.readFloats(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                    org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                    keys0.length);
          }
          result.floatAttributes = new java.util.HashMap<Integer, Float>();
          for (int index0 = 0; index0 < keys0.length; ++index0) {
            result.floatAttributes.put(keys0[index0], values0[index0]);
          }
        }
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, false);
        {
          decoder1.readDataHeaderForMap();
          int[] keys0;
          boolean[] values0;
          {
            keys0 =
                decoder1.readInts(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
                    org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            {
              for (int i2 = 0; i2 < keys0.length; ++i2) {
                BoolAttribute.validate(keys0[i2]);
              }
            }
          }
          {
            values0 =
                decoder1.readBooleans(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                    org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                    keys0.length);
          }
          result.boolAttributes = new java.util.HashMap<Integer, Boolean>();
          for (int index0 = 0; index0 < keys0.length; ++index0) {
            result.boolAttributes.put(keys0[index0], values0[index0]);
          }
        }
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, false);
        {
          decoder1.readDataHeaderForMap();
          int[] keys0;
          int[][] values0;
          {
            keys0 =
                decoder1.readInts(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
                    org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            {
              for (int i2 = 0; i2 < keys0.length; ++i2) {
                IntListAttribute.validate(keys0[i2]);
              }
            }
          }
          {
            org.chromium.mojo.bindings.Decoder decoder2 =
                decoder1.readPointer(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                    false);
            {
              org.chromium.mojo.bindings.DataHeader si2 =
                  decoder2.readDataHeaderForPointerArray(keys0.length);
              values0 = new int[si2.elementsOrVersion][];
              for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {

                values0[i2] =
                    decoder2.readInts(
                        org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                            + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2,
                        org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                        org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
              }
            }
          }
          result.intlistAttributes = new java.util.HashMap<Integer, int[]>();
          for (int index0 = 0; index0 < keys0.length; ++index0) {
            result.intlistAttributes.put(keys0[index0], values0[index0]);
          }
        }
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, false);
        {
          decoder1.readDataHeaderForMap();
          int[] keys0;
          String[][] values0;
          {
            keys0 =
                decoder1.readInts(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
                    org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            {
              for (int i2 = 0; i2 < keys0.length; ++i2) {
                StringListAttribute.validate(keys0[i2]);
              }
            }
          }
          {
            org.chromium.mojo.bindings.Decoder decoder2 =
                decoder1.readPointer(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                    false);
            {
              org.chromium.mojo.bindings.DataHeader si2 =
                  decoder2.readDataHeaderForPointerArray(keys0.length);
              values0 = new String[si2.elementsOrVersion][];
              for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {

                org.chromium.mojo.bindings.Decoder decoder3 =
                    decoder2.readPointer(
                        org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                            + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2,
                        false);
                {
                  org.chromium.mojo.bindings.DataHeader si3 =
                      decoder3.readDataHeaderForPointerArray(
                          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                  values0[i2] = new String[si3.elementsOrVersion];
                  for (int i3 = 0; i3 < si3.elementsOrVersion; ++i3) {

                    values0[i2][i3] =
                        decoder3.readString(
                            org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                                + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i3,
                            false);
                  }
                }
              }
            }
          }
          result.stringlistAttributes = new java.util.HashMap<Integer, String[]>();
          for (int index0 = 0; index0 < keys0.length; ++index0) {
            result.stringlistAttributes.put(keys0[index0], values0[index0]);
          }
        }
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(80, false);
        {
          decoder1.readDataHeaderForMap();
          String[] keys0;
          String[] values0;
          {
            org.chromium.mojo.bindings.Decoder decoder2 =
                decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
            {
              org.chromium.mojo.bindings.DataHeader si2 =
                  decoder2.readDataHeaderForPointerArray(
                      org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
              keys0 = new String[si2.elementsOrVersion];
              for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {

                keys0[i2] =
                    decoder2.readString(
                        org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                            + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2,
                        false);
              }
            }
          }
          {
            org.chromium.mojo.bindings.Decoder decoder2 =
                decoder1.readPointer(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                    false);
            {
              org.chromium.mojo.bindings.DataHeader si2 =
                  decoder2.readDataHeaderForPointerArray(keys0.length);
              values0 = new String[si2.elementsOrVersion];
              for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {

                values0[i2] =
                    decoder2.readString(
                        org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                            + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2,
                        false);
              }
            }
          }
          result.htmlAttributes = new java.util.HashMap<String, String>();
          for (int index0 = 0; index0 < keys0.length; ++index0) {
            result.htmlAttributes.put(keys0[index0], values0[index0]);
          }
        }
      }
      {
        result.childIds =
            decoder0.readInts(
                88,
                org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(96, false);
        result.relativeBounds = AxRelativeBounds.decode(decoder1);
      }

    } finally {
      decoder0.decreaseStackDepth();
    }
    return result;
  }

  @SuppressWarnings("unchecked")
  @Override
  protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    org.chromium.mojo.bindings.Encoder encoder0 =
        encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

    encoder0.encode(this.id, 8);

    encoder0.encode(this.role, 12);

    encoder0.encode(this.state, 16);

    encoder0.encode(this.actions, 24);

    if (this.stringAttributes == null) {
      encoder0.encodeNullPointer(32, false);
    } else {
      org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(32);
      int size0 = this.stringAttributes.size();
      int[] keys0 = new int[size0];
      String[] values0 = new String[size0];
      int index0 = 0;
      for (java.util.Map.Entry<Integer, String> entry0 : this.stringAttributes.entrySet()) {
        keys0[index0] = entry0.getKey();
        values0[index0] = entry0.getValue();
        ++index0;
      }

      encoder1.encode(
          keys0,
          org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
          org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);

      {
        org.chromium.mojo.bindings.Encoder encoder2 =
            encoder1.encodePointerArray(
                values0.length,
                org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                    + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i1 = 0; i1 < values0.length; ++i1) {

          encoder2.encode(
              values0[i1],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
              false);
        }
      }
    }

    if (this.intAttributes == null) {
      encoder0.encodeNullPointer(40, false);
    } else {
      org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(40);
      int size0 = this.intAttributes.size();
      int[] keys0 = new int[size0];
      int[] values0 = new int[size0];
      int index0 = 0;
      for (java.util.Map.Entry<Integer, Integer> entry0 : this.intAttributes.entrySet()) {
        keys0[index0] = entry0.getKey();
        values0[index0] = entry0.getValue();
        ++index0;
      }

      encoder1.encode(
          keys0,
          org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
          org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);

      encoder1.encode(
          values0,
          org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
              + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
          org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
    }

    if (this.floatAttributes == null) {
      encoder0.encodeNullPointer(48, false);
    } else {
      org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(48);
      int size0 = this.floatAttributes.size();
      int[] keys0 = new int[size0];
      float[] values0 = new float[size0];
      int index0 = 0;
      for (java.util.Map.Entry<Integer, Float> entry0 : this.floatAttributes.entrySet()) {
        keys0[index0] = entry0.getKey();
        values0[index0] = entry0.getValue();
        ++index0;
      }

      encoder1.encode(
          keys0,
          org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
          org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);

      encoder1.encode(
          values0,
          org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
              + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
          org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
    }

    if (this.boolAttributes == null) {
      encoder0.encodeNullPointer(56, false);
    } else {
      org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(56);
      int size0 = this.boolAttributes.size();
      int[] keys0 = new int[size0];
      boolean[] values0 = new boolean[size0];
      int index0 = 0;
      for (java.util.Map.Entry<Integer, Boolean> entry0 : this.boolAttributes.entrySet()) {
        keys0[index0] = entry0.getKey();
        values0[index0] = entry0.getValue();
        ++index0;
      }

      encoder1.encode(
          keys0,
          org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
          org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);

      encoder1.encode(
          values0,
          org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
              + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
          org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
    }

    if (this.intlistAttributes == null) {
      encoder0.encodeNullPointer(64, false);
    } else {
      org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(64);
      int size0 = this.intlistAttributes.size();
      int[] keys0 = new int[size0];
      int[][] values0 = new int[size0][];
      int index0 = 0;
      for (java.util.Map.Entry<Integer, int[]> entry0 : this.intlistAttributes.entrySet()) {
        keys0[index0] = entry0.getKey();
        values0[index0] = entry0.getValue();
        ++index0;
      }

      encoder1.encode(
          keys0,
          org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
          org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);

      {
        org.chromium.mojo.bindings.Encoder encoder2 =
            encoder1.encodePointerArray(
                values0.length,
                org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                    + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i1 = 0; i1 < values0.length; ++i1) {

          encoder2.encode(
              values0[i1],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
              org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
              org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
      }
    }

    if (this.stringlistAttributes == null) {
      encoder0.encodeNullPointer(72, false);
    } else {
      org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(72);
      int size0 = this.stringlistAttributes.size();
      int[] keys0 = new int[size0];
      String[][] values0 = new String[size0][];
      int index0 = 0;
      for (java.util.Map.Entry<Integer, String[]> entry0 : this.stringlistAttributes.entrySet()) {
        keys0[index0] = entry0.getKey();
        values0[index0] = entry0.getValue();
        ++index0;
      }

      encoder1.encode(
          keys0,
          org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
          org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);

      {
        org.chromium.mojo.bindings.Encoder encoder2 =
            encoder1.encodePointerArray(
                values0.length,
                org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                    + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i1 = 0; i1 < values0.length; ++i1) {

          if (values0[i1] == null) {
            encoder2.encodeNullPointer(
                org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                    + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                false);
          } else {
            org.chromium.mojo.bindings.Encoder encoder3 =
                encoder2.encodePointerArray(
                    values0[i1].length,
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i2 = 0; i2 < values0[i1].length; ++i2) {

              encoder3.encode(
                  values0[i1][i2],
                  org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                      + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2,
                  false);
            }
          }
        }
      }
    }

    if (this.htmlAttributes == null) {
      encoder0.encodeNullPointer(80, false);
    } else {
      org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(80);
      int size0 = this.htmlAttributes.size();
      String[] keys0 = new String[size0];
      String[] values0 = new String[size0];
      int index0 = 0;
      for (java.util.Map.Entry<String, String> entry0 : this.htmlAttributes.entrySet()) {
        keys0[index0] = entry0.getKey();
        values0[index0] = entry0.getValue();
        ++index0;
      }

      {
        org.chromium.mojo.bindings.Encoder encoder2 =
            encoder1.encodePointerArray(
                keys0.length,
                org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i1 = 0; i1 < keys0.length; ++i1) {

          encoder2.encode(
              keys0[i1],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
              false);
        }
      }

      {
        org.chromium.mojo.bindings.Encoder encoder2 =
            encoder1.encodePointerArray(
                values0.length,
                org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                    + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i1 = 0; i1 < values0.length; ++i1) {

          encoder2.encode(
              values0[i1],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
              false);
        }
      }
    }

    encoder0.encode(
        this.childIds,
        88,
        org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
        org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);

    encoder0.encode(this.relativeBounds, 96, false);
  }
}

// MediaController_Internal.java is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/media_session/public/mojom/media_controller.mojom
//

package org.chromium.media_session.mojom;

class MediaController_Internal {

  public static final org.chromium.mojo.bindings.Interface.Manager<
          MediaController, MediaController.Proxy>
      MANAGER =
          new org.chromium.mojo.bindings.Interface.Manager<
              MediaController, MediaController.Proxy>() {

            @Override
            public String getName() {
              return "media_session.mojom.MediaController";
            }

            @Override
            public int getVersion() {
              return 6;
            }

            @Override
            public Proxy buildProxy(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
              return new Proxy(core, messageReceiver);
            }

            @Override
            public Stub buildStub(org.chromium.mojo.system.Core core, MediaController impl) {
              return new Stub(core, impl);
            }

            @Override
            public MediaController[] buildArray(int size) {
              return new MediaController[size];
            }
          };

  private static final int SUSPEND_ORDINAL = 0;

  private static final int RESUME_ORDINAL = 1;

  private static final int STOP_ORDINAL = 2;

  private static final int TOGGLE_SUSPEND_RESUME_ORDINAL = 3;

  private static final int ADD_OBSERVER_ORDINAL = 4;

  private static final int PREVIOUS_TRACK_ORDINAL = 5;

  private static final int NEXT_TRACK_ORDINAL = 6;

  private static final int SEEK_ORDINAL = 7;

  private static final int OBSERVE_IMAGES_ORDINAL = 8;

  private static final int SEEK_TO_ORDINAL = 9;

  private static final int SCRUB_TO_ORDINAL = 10;

  private static final int ENTER_PICTURE_IN_PICTURE_ORDINAL = 11;

  private static final int EXIT_PICTURE_IN_PICTURE_ORDINAL = 12;

  private static final int SET_AUDIO_SINK_ID_ORDINAL = 13;

  private static final int TOGGLE_MICROPHONE_ORDINAL = 14;

  private static final int TOGGLE_CAMERA_ORDINAL = 15;

  private static final int HANG_UP_ORDINAL = 16;

  private static final int RAISE_ORDINAL = 17;

  private static final int SET_MUTE_ORDINAL = 18;

  private static final int REQUEST_MEDIA_REMOTING_ORDINAL = 19;

  private static final int ENTER_AUTO_PICTURE_IN_PICTURE_ORDINAL = 20;

  private static final int SKIP_AD_ORDINAL = 21;

  static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy
      implements MediaController.Proxy {

    Proxy(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
      super(core, messageReceiver);
    }

    @Override
    public void suspend() {

      MediaControllerSuspendParams _message = new MediaControllerSuspendParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(SUSPEND_ORDINAL)));
    }

    @Override
    public void resume() {

      MediaControllerResumeParams _message = new MediaControllerResumeParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(RESUME_ORDINAL)));
    }

    @Override
    public void stop() {

      MediaControllerStopParams _message = new MediaControllerStopParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(STOP_ORDINAL)));
    }

    @Override
    public void toggleSuspendResume() {

      MediaControllerToggleSuspendResumeParams _message =
          new MediaControllerToggleSuspendResumeParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(TOGGLE_SUSPEND_RESUME_ORDINAL)));
    }

    @Override
    public void addObserver(MediaControllerObserver observer) {

      MediaControllerAddObserverParams _message = new MediaControllerAddObserverParams();

      _message.observer = observer;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(ADD_OBSERVER_ORDINAL)));
    }

    @Override
    public void previousTrack() {

      MediaControllerPreviousTrackParams _message = new MediaControllerPreviousTrackParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(PREVIOUS_TRACK_ORDINAL)));
    }

    @Override
    public void nextTrack() {

      MediaControllerNextTrackParams _message = new MediaControllerNextTrackParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(NEXT_TRACK_ORDINAL)));
    }

    @Override
    public void seek(org.chromium.mojo_base.mojom.TimeDelta seekTime) {

      MediaControllerSeekParams _message = new MediaControllerSeekParams();

      _message.seekTime = seekTime;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(SEEK_ORDINAL)));
    }

    @Override
    public void observeImages(
        int type, int minimumSizePx, int desiredSizePx, MediaControllerImageObserver observer) {

      MediaControllerObserveImagesParams _message = new MediaControllerObserveImagesParams();

      _message.type = type;

      _message.minimumSizePx = minimumSizePx;

      _message.desiredSizePx = desiredSizePx;

      _message.observer = observer;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(OBSERVE_IMAGES_ORDINAL)));
    }

    @Override
    public void seekTo(org.chromium.mojo_base.mojom.TimeDelta seekTime) {

      MediaControllerSeekToParams _message = new MediaControllerSeekToParams();

      _message.seekTime = seekTime;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(SEEK_TO_ORDINAL)));
    }

    @Override
    public void scrubTo(org.chromium.mojo_base.mojom.TimeDelta seekTime) {

      MediaControllerScrubToParams _message = new MediaControllerScrubToParams();

      _message.seekTime = seekTime;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(SCRUB_TO_ORDINAL)));
    }

    @Override
    public void enterPictureInPicture() {

      MediaControllerEnterPictureInPictureParams _message =
          new MediaControllerEnterPictureInPictureParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(ENTER_PICTURE_IN_PICTURE_ORDINAL)));
    }

    @Override
    public void exitPictureInPicture() {

      MediaControllerExitPictureInPictureParams _message =
          new MediaControllerExitPictureInPictureParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(EXIT_PICTURE_IN_PICTURE_ORDINAL)));
    }

    @Override
    public void setAudioSinkId(String id) {

      MediaControllerSetAudioSinkIdParams _message = new MediaControllerSetAudioSinkIdParams();

      _message.id = id;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(SET_AUDIO_SINK_ID_ORDINAL)));
    }

    @Override
    public void toggleMicrophone() {

      MediaControllerToggleMicrophoneParams _message = new MediaControllerToggleMicrophoneParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(TOGGLE_MICROPHONE_ORDINAL)));
    }

    @Override
    public void toggleCamera() {

      MediaControllerToggleCameraParams _message = new MediaControllerToggleCameraParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(TOGGLE_CAMERA_ORDINAL)));
    }

    @Override
    public void hangUp() {

      MediaControllerHangUpParams _message = new MediaControllerHangUpParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(HANG_UP_ORDINAL)));
    }

    @Override
    public void raise() {

      MediaControllerRaiseParams _message = new MediaControllerRaiseParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(RAISE_ORDINAL)));
    }

    @Override
    public void setMute(boolean mute) {

      MediaControllerSetMuteParams _message = new MediaControllerSetMuteParams();

      _message.mute = mute;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(SET_MUTE_ORDINAL)));
    }

    @Override
    public void requestMediaRemoting() {

      MediaControllerRequestMediaRemotingParams _message =
          new MediaControllerRequestMediaRemotingParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(REQUEST_MEDIA_REMOTING_ORDINAL)));
    }

    @Override
    public void enterAutoPictureInPicture() {

      MediaControllerEnterAutoPictureInPictureParams _message =
          new MediaControllerEnterAutoPictureInPictureParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      ENTER_AUTO_PICTURE_IN_PICTURE_ORDINAL)));
    }

    @Override
    public void skipAd() {

      MediaControllerSkipAdParams _message = new MediaControllerSkipAdParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(SKIP_AD_ORDINAL)));
    }
  }

  static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<MediaController> {

    Stub(org.chromium.mojo.system.Core core, MediaController impl) {
      super(core, impl);
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
        if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
        }
        if (!header.validateHeader(flags)) {
          return false;
        }
        switch (header.getType()) {
          case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants
              .RUN_OR_CLOSE_PIPE_MESSAGE_ID:
            return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                MediaController_Internal.MANAGER, messageWithHeader);

          case SUSPEND_ORDINAL:
            {
              MediaControllerSuspendParams.deserialize(messageWithHeader.getPayload());

              getImpl().suspend();
              return true;
            }

          case RESUME_ORDINAL:
            {
              MediaControllerResumeParams.deserialize(messageWithHeader.getPayload());

              getImpl().resume();
              return true;
            }

          case STOP_ORDINAL:
            {
              MediaControllerStopParams.deserialize(messageWithHeader.getPayload());

              getImpl().stop();
              return true;
            }

          case TOGGLE_SUSPEND_RESUME_ORDINAL:
            {
              MediaControllerToggleSuspendResumeParams.deserialize(messageWithHeader.getPayload());

              getImpl().toggleSuspendResume();
              return true;
            }

          case ADD_OBSERVER_ORDINAL:
            {
              MediaControllerAddObserverParams data =
                  MediaControllerAddObserverParams.deserialize(messageWithHeader.getPayload());

              getImpl().addObserver(data.observer);
              return true;
            }

          case PREVIOUS_TRACK_ORDINAL:
            {
              MediaControllerPreviousTrackParams.deserialize(messageWithHeader.getPayload());

              getImpl().previousTrack();
              return true;
            }

          case NEXT_TRACK_ORDINAL:
            {
              MediaControllerNextTrackParams.deserialize(messageWithHeader.getPayload());

              getImpl().nextTrack();
              return true;
            }

          case SEEK_ORDINAL:
            {
              MediaControllerSeekParams data =
                  MediaControllerSeekParams.deserialize(messageWithHeader.getPayload());

              getImpl().seek(data.seekTime);
              return true;
            }

          case OBSERVE_IMAGES_ORDINAL:
            {
              MediaControllerObserveImagesParams data =
                  MediaControllerObserveImagesParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .observeImages(data.type, data.minimumSizePx, data.desiredSizePx, data.observer);
              return true;
            }

          case SEEK_TO_ORDINAL:
            {
              MediaControllerSeekToParams data =
                  MediaControllerSeekToParams.deserialize(messageWithHeader.getPayload());

              getImpl().seekTo(data.seekTime);
              return true;
            }

          case SCRUB_TO_ORDINAL:
            {
              MediaControllerScrubToParams data =
                  MediaControllerScrubToParams.deserialize(messageWithHeader.getPayload());

              getImpl().scrubTo(data.seekTime);
              return true;
            }

          case ENTER_PICTURE_IN_PICTURE_ORDINAL:
            {
              MediaControllerEnterPictureInPictureParams.deserialize(
                  messageWithHeader.getPayload());

              getImpl().enterPictureInPicture();
              return true;
            }

          case EXIT_PICTURE_IN_PICTURE_ORDINAL:
            {
              MediaControllerExitPictureInPictureParams.deserialize(messageWithHeader.getPayload());

              getImpl().exitPictureInPicture();
              return true;
            }

          case SET_AUDIO_SINK_ID_ORDINAL:
            {
              MediaControllerSetAudioSinkIdParams data =
                  MediaControllerSetAudioSinkIdParams.deserialize(messageWithHeader.getPayload());

              getImpl().setAudioSinkId(data.id);
              return true;
            }

          case TOGGLE_MICROPHONE_ORDINAL:
            {
              MediaControllerToggleMicrophoneParams.deserialize(messageWithHeader.getPayload());

              getImpl().toggleMicrophone();
              return true;
            }

          case TOGGLE_CAMERA_ORDINAL:
            {
              MediaControllerToggleCameraParams.deserialize(messageWithHeader.getPayload());

              getImpl().toggleCamera();
              return true;
            }

          case HANG_UP_ORDINAL:
            {
              MediaControllerHangUpParams.deserialize(messageWithHeader.getPayload());

              getImpl().hangUp();
              return true;
            }

          case RAISE_ORDINAL:
            {
              MediaControllerRaiseParams.deserialize(messageWithHeader.getPayload());

              getImpl().raise();
              return true;
            }

          case SET_MUTE_ORDINAL:
            {
              MediaControllerSetMuteParams data =
                  MediaControllerSetMuteParams.deserialize(messageWithHeader.getPayload());

              getImpl().setMute(data.mute);
              return true;
            }

          case REQUEST_MEDIA_REMOTING_ORDINAL:
            {
              MediaControllerRequestMediaRemotingParams.deserialize(messageWithHeader.getPayload());

              getImpl().requestMediaRemoting();
              return true;
            }

          case ENTER_AUTO_PICTURE_IN_PICTURE_ORDINAL:
            {
              MediaControllerEnterAutoPictureInPictureParams.deserialize(
                  messageWithHeader.getPayload());

              getImpl().enterAutoPictureInPicture();
              return true;
            }

          case SKIP_AD_ORDINAL:
            {
              MediaControllerSkipAdParams.deserialize(messageWithHeader.getPayload());

              getImpl().skipAd();
              return true;
            }

          default:
            return false;
        }
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        System.err.println(e.toString());
        return false;
      }
    }

    @Override
    public boolean acceptWithResponder(
        org.chromium.mojo.bindings.Message message,
        org.chromium.mojo.bindings.MessageReceiver receiver) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
        if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
        }
        if (!header.validateHeader(flags)) {
          return false;
        }
        switch (header.getType()) {
          case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants
              .RUN_MESSAGE_ID:
            return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                getCore(), MediaController_Internal.MANAGER, messageWithHeader, receiver);

          default:
            return false;
        }
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        System.err.println(e.toString());
        return false;
      }
    }
  }

  static final class MediaControllerSuspendParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerSuspendParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerSuspendParams() {
      this(0);
    }

    public static MediaControllerSuspendParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerSuspendParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerSuspendParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerSuspendParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerSuspendParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class MediaControllerResumeParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerResumeParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerResumeParams() {
      this(0);
    }

    public static MediaControllerResumeParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerResumeParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerResumeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerResumeParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerResumeParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class MediaControllerStopParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerStopParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerStopParams() {
      this(0);
    }

    public static MediaControllerStopParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerStopParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerStopParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerStopParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerStopParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class MediaControllerToggleSuspendResumeParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerToggleSuspendResumeParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerToggleSuspendResumeParams() {
      this(0);
    }

    public static MediaControllerToggleSuspendResumeParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerToggleSuspendResumeParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerToggleSuspendResumeParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerToggleSuspendResumeParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerToggleSuspendResumeParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class MediaControllerAddObserverParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public MediaControllerObserver observer;

    private MediaControllerAddObserverParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerAddObserverParams() {
      this(0);
    }

    public static MediaControllerAddObserverParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerAddObserverParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerAddObserverParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerAddObserverParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerAddObserverParams(elementsOrVersion);
        {
          result.observer =
              decoder0.readServiceInterface(8, false, MediaControllerObserver.MANAGER);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.observer, 8, false, MediaControllerObserver.MANAGER);
    }
  }

  static final class MediaControllerPreviousTrackParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerPreviousTrackParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerPreviousTrackParams() {
      this(0);
    }

    public static MediaControllerPreviousTrackParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerPreviousTrackParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerPreviousTrackParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerPreviousTrackParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerPreviousTrackParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class MediaControllerNextTrackParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerNextTrackParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerNextTrackParams() {
      this(0);
    }

    public static MediaControllerNextTrackParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerNextTrackParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerNextTrackParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerNextTrackParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerNextTrackParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class MediaControllerSeekParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo_base.mojom.TimeDelta seekTime;

    private MediaControllerSeekParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerSeekParams() {
      this(0);
    }

    public static MediaControllerSeekParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerSeekParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerSeekParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerSeekParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerSeekParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.seekTime = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.seekTime, 8, false);
    }
  }

  static final class MediaControllerObserveImagesParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 32;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(32, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int type;
    public int minimumSizePx;
    public int desiredSizePx;
    public MediaControllerImageObserver observer;

    private MediaControllerObserveImagesParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerObserveImagesParams() {
      this(0);
    }

    public static MediaControllerObserveImagesParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerObserveImagesParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerObserveImagesParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerObserveImagesParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerObserveImagesParams(elementsOrVersion);
        {
          result.type = decoder0.readInt(8);
          MediaSessionImageType.validate(result.type);
          result.type = MediaSessionImageType.toKnownValue(result.type);
        }
        {
          result.minimumSizePx = decoder0.readInt(12);
        }
        {
          result.desiredSizePx = decoder0.readInt(16);
        }
        {
          result.observer =
              decoder0.readServiceInterface(20, false, MediaControllerImageObserver.MANAGER);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.type, 8);

      encoder0.encode(this.minimumSizePx, 12);

      encoder0.encode(this.desiredSizePx, 16);

      encoder0.encode(this.observer, 20, false, MediaControllerImageObserver.MANAGER);
    }
  }

  static final class MediaControllerSeekToParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo_base.mojom.TimeDelta seekTime;

    private MediaControllerSeekToParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerSeekToParams() {
      this(0);
    }

    public static MediaControllerSeekToParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerSeekToParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerSeekToParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerSeekToParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerSeekToParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.seekTime = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.seekTime, 8, false);
    }
  }

  static final class MediaControllerScrubToParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo_base.mojom.TimeDelta seekTime;

    private MediaControllerScrubToParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerScrubToParams() {
      this(0);
    }

    public static MediaControllerScrubToParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerScrubToParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerScrubToParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerScrubToParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerScrubToParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.seekTime = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.seekTime, 8, false);
    }
  }

  static final class MediaControllerEnterPictureInPictureParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerEnterPictureInPictureParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerEnterPictureInPictureParams() {
      this(0);
    }

    public static MediaControllerEnterPictureInPictureParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerEnterPictureInPictureParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerEnterPictureInPictureParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerEnterPictureInPictureParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerEnterPictureInPictureParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class MediaControllerExitPictureInPictureParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerExitPictureInPictureParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerExitPictureInPictureParams() {
      this(0);
    }

    public static MediaControllerExitPictureInPictureParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerExitPictureInPictureParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerExitPictureInPictureParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerExitPictureInPictureParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerExitPictureInPictureParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class MediaControllerSetAudioSinkIdParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public String id;

    private MediaControllerSetAudioSinkIdParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerSetAudioSinkIdParams() {
      this(0);
    }

    public static MediaControllerSetAudioSinkIdParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerSetAudioSinkIdParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerSetAudioSinkIdParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerSetAudioSinkIdParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerSetAudioSinkIdParams(elementsOrVersion);
        {
          result.id = decoder0.readString(8, true);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.id, 8, true);
    }
  }

  static final class MediaControllerToggleMicrophoneParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerToggleMicrophoneParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerToggleMicrophoneParams() {
      this(0);
    }

    public static MediaControllerToggleMicrophoneParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerToggleMicrophoneParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerToggleMicrophoneParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerToggleMicrophoneParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerToggleMicrophoneParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class MediaControllerToggleCameraParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerToggleCameraParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerToggleCameraParams() {
      this(0);
    }

    public static MediaControllerToggleCameraParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerToggleCameraParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerToggleCameraParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerToggleCameraParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerToggleCameraParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class MediaControllerHangUpParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerHangUpParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerHangUpParams() {
      this(0);
    }

    public static MediaControllerHangUpParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerHangUpParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerHangUpParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerHangUpParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerHangUpParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class MediaControllerRaiseParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerRaiseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerRaiseParams() {
      this(0);
    }

    public static MediaControllerRaiseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerRaiseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerRaiseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerRaiseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerRaiseParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class MediaControllerSetMuteParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public boolean mute;

    private MediaControllerSetMuteParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerSetMuteParams() {
      this(0);
    }

    public static MediaControllerSetMuteParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerSetMuteParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerSetMuteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerSetMuteParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerSetMuteParams(elementsOrVersion);
        {
          result.mute = decoder0.readBoolean(8, 0);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.mute, 8, 0);
    }
  }

  static final class MediaControllerRequestMediaRemotingParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerRequestMediaRemotingParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerRequestMediaRemotingParams() {
      this(0);
    }

    public static MediaControllerRequestMediaRemotingParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerRequestMediaRemotingParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerRequestMediaRemotingParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerRequestMediaRemotingParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerRequestMediaRemotingParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class MediaControllerEnterAutoPictureInPictureParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerEnterAutoPictureInPictureParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerEnterAutoPictureInPictureParams() {
      this(0);
    }

    public static MediaControllerEnterAutoPictureInPictureParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerEnterAutoPictureInPictureParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerEnterAutoPictureInPictureParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerEnterAutoPictureInPictureParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerEnterAutoPictureInPictureParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class MediaControllerSkipAdParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private MediaControllerSkipAdParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public MediaControllerSkipAdParams() {
      this(0);
    }

    public static MediaControllerSkipAdParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaControllerSkipAdParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaControllerSkipAdParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      MediaControllerSkipAdParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new MediaControllerSkipAdParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }
}

// Directory_Internal.java is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     components/services/filesystem/public/mojom/directory.mojom
//

package org.chromium.filesystem.mojom;

class Directory_Internal {

  public static final org.chromium.mojo.bindings.Interface.Manager<Directory, Directory.Proxy>
      MANAGER =
          new org.chromium.mojo.bindings.Interface.Manager<Directory, Directory.Proxy>() {

            @Override
            public String getName() {
              return "filesystem.mojom.Directory";
            }

            @Override
            public int getVersion() {
              return 0;
            }

            @Override
            public Proxy buildProxy(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
              return new Proxy(core, messageReceiver);
            }

            @Override
            public Stub buildStub(org.chromium.mojo.system.Core core, Directory impl) {
              return new Stub(core, impl);
            }

            @Override
            public Directory[] buildArray(int size) {
              return new Directory[size];
            }
          };

  private static final int READ_ORDINAL = 0;

  private static final int OPEN_FILE_HANDLE_ORDINAL = 1;

  private static final int OPEN_FILE_HANDLES_ORDINAL = 2;

  private static final int OPEN_DIRECTORY_ORDINAL = 3;

  private static final int RENAME_ORDINAL = 4;

  private static final int REPLACE_ORDINAL = 5;

  private static final int DELETE_ORDINAL = 6;

  private static final int EXISTS_ORDINAL = 7;

  private static final int IS_WRITABLE_ORDINAL = 8;

  private static final int FLUSH_ORDINAL = 9;

  private static final int STAT_FILE_ORDINAL = 10;

  private static final int CLONE_ORDINAL = 11;

  private static final int READ_ENTIRE_FILE_ORDINAL = 12;

  private static final int WRITE_FILE_ORDINAL = 13;

  static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy
      implements Directory.Proxy {

    Proxy(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
      super(core, messageReceiver);
    }

    @Override
    public void read(Read_Response callback) {

      DirectoryReadParams _message = new DirectoryReadParams();

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      READ_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new DirectoryReadResponseParamsForwardToCallback(callback));
    }

    @Override
    public void openFileHandle(String path, int openFlags, OpenFileHandle_Response callback) {

      DirectoryOpenFileHandleParams _message = new DirectoryOpenFileHandleParams();

      _message.path = path;

      _message.openFlags = openFlags;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      OPEN_FILE_HANDLE_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new DirectoryOpenFileHandleResponseParamsForwardToCallback(callback));
    }

    @Override
    public void openFileHandles(FileOpenDetails[] files, OpenFileHandles_Response callback) {

      DirectoryOpenFileHandlesParams _message = new DirectoryOpenFileHandlesParams();

      _message.files = files;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      OPEN_FILE_HANDLES_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new DirectoryOpenFileHandlesResponseParamsForwardToCallback(callback));
    }

    @Override
    public void openDirectory(
        String path,
        org.chromium.mojo.bindings.InterfaceRequest<Directory> directory,
        int openFlags,
        OpenDirectory_Response callback) {

      DirectoryOpenDirectoryParams _message = new DirectoryOpenDirectoryParams();

      _message.path = path;

      _message.directory = directory;

      _message.openFlags = openFlags;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      OPEN_DIRECTORY_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new DirectoryOpenDirectoryResponseParamsForwardToCallback(callback));
    }

    @Override
    public void rename(String path, String newPath, Rename_Response callback) {

      DirectoryRenameParams _message = new DirectoryRenameParams();

      _message.path = path;

      _message.newPath = newPath;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      RENAME_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new DirectoryRenameResponseParamsForwardToCallback(callback));
    }

    @Override
    public void replace(String path, String newPath, Replace_Response callback) {

      DirectoryReplaceParams _message = new DirectoryReplaceParams();

      _message.path = path;

      _message.newPath = newPath;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      REPLACE_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new DirectoryReplaceResponseParamsForwardToCallback(callback));
    }

    @Override
    public void delete(String path, int deleteFlags, Delete_Response callback) {

      DirectoryDeleteParams _message = new DirectoryDeleteParams();

      _message.path = path;

      _message.deleteFlags = deleteFlags;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      DELETE_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new DirectoryDeleteResponseParamsForwardToCallback(callback));
    }

    @Override
    public void exists(String path, Exists_Response callback) {

      DirectoryExistsParams _message = new DirectoryExistsParams();

      _message.path = path;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      EXISTS_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new DirectoryExistsResponseParamsForwardToCallback(callback));
    }

    @Override
    public void isWritable(String path, IsWritable_Response callback) {

      DirectoryIsWritableParams _message = new DirectoryIsWritableParams();

      _message.path = path;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      IS_WRITABLE_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new DirectoryIsWritableResponseParamsForwardToCallback(callback));
    }

    @Override
    public void flush(Flush_Response callback) {

      DirectoryFlushParams _message = new DirectoryFlushParams();

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      FLUSH_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new DirectoryFlushResponseParamsForwardToCallback(callback));
    }

    @Override
    public void statFile(String path, StatFile_Response callback) {

      DirectoryStatFileParams _message = new DirectoryStatFileParams();

      _message.path = path;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      STAT_FILE_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new DirectoryStatFileResponseParamsForwardToCallback(callback));
    }

    @Override
    public void clone(org.chromium.mojo.bindings.InterfaceRequest<Directory> directory) {

      DirectoryCloneParams _message = new DirectoryCloneParams();

      _message.directory = directory;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(CLONE_ORDINAL)));
    }

    @Override
    public void readEntireFile(String path, ReadEntireFile_Response callback) {

      DirectoryReadEntireFileParams _message = new DirectoryReadEntireFileParams();

      _message.path = path;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      READ_ENTIRE_FILE_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new DirectoryReadEntireFileResponseParamsForwardToCallback(callback));
    }

    @Override
    public void writeFile(String path, byte[] data, WriteFile_Response callback) {

      DirectoryWriteFileParams _message = new DirectoryWriteFileParams();

      _message.path = path;

      _message.data = data;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      WRITE_FILE_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new DirectoryWriteFileResponseParamsForwardToCallback(callback));
    }
  }

  static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<Directory> {

    Stub(org.chromium.mojo.system.Core core, Directory impl) {
      super(core, impl);
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
        if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
        }
        if (!header.validateHeader(flags)) {
          return false;
        }
        switch (header.getType()) {
          case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants
              .RUN_OR_CLOSE_PIPE_MESSAGE_ID:
            return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                Directory_Internal.MANAGER, messageWithHeader);

          case CLONE_ORDINAL:
            {
              DirectoryCloneParams data =
                  DirectoryCloneParams.deserialize(messageWithHeader.getPayload());

              getImpl().clone(data.directory);
              return true;
            }

          default:
            return false;
        }
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        System.err.println(e.toString());
        return false;
      }
    }

    @Override
    public boolean acceptWithResponder(
        org.chromium.mojo.bindings.Message message,
        org.chromium.mojo.bindings.MessageReceiver receiver) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
        if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
        }
        if (!header.validateHeader(flags)) {
          return false;
        }
        switch (header.getType()) {
          case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants
              .RUN_MESSAGE_ID:
            return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                getCore(), Directory_Internal.MANAGER, messageWithHeader, receiver);

          case READ_ORDINAL:
            {
              DirectoryReadParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .read(
                      new DirectoryReadResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case OPEN_FILE_HANDLE_ORDINAL:
            {
              DirectoryOpenFileHandleParams data =
                  DirectoryOpenFileHandleParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .openFileHandle(
                      data.path,
                      data.openFlags,
                      new DirectoryOpenFileHandleResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case OPEN_FILE_HANDLES_ORDINAL:
            {
              DirectoryOpenFileHandlesParams data =
                  DirectoryOpenFileHandlesParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .openFileHandles(
                      data.files,
                      new DirectoryOpenFileHandlesResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case OPEN_DIRECTORY_ORDINAL:
            {
              DirectoryOpenDirectoryParams data =
                  DirectoryOpenDirectoryParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .openDirectory(
                      data.path,
                      data.directory,
                      data.openFlags,
                      new DirectoryOpenDirectoryResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case RENAME_ORDINAL:
            {
              DirectoryRenameParams data =
                  DirectoryRenameParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .rename(
                      data.path,
                      data.newPath,
                      new DirectoryRenameResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case REPLACE_ORDINAL:
            {
              DirectoryReplaceParams data =
                  DirectoryReplaceParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .replace(
                      data.path,
                      data.newPath,
                      new DirectoryReplaceResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case DELETE_ORDINAL:
            {
              DirectoryDeleteParams data =
                  DirectoryDeleteParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .delete(
                      data.path,
                      data.deleteFlags,
                      new DirectoryDeleteResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case EXISTS_ORDINAL:
            {
              DirectoryExistsParams data =
                  DirectoryExistsParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .exists(
                      data.path,
                      new DirectoryExistsResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case IS_WRITABLE_ORDINAL:
            {
              DirectoryIsWritableParams data =
                  DirectoryIsWritableParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .isWritable(
                      data.path,
                      new DirectoryIsWritableResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case FLUSH_ORDINAL:
            {
              DirectoryFlushParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .flush(
                      new DirectoryFlushResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case STAT_FILE_ORDINAL:
            {
              DirectoryStatFileParams data =
                  DirectoryStatFileParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .statFile(
                      data.path,
                      new DirectoryStatFileResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case READ_ENTIRE_FILE_ORDINAL:
            {
              DirectoryReadEntireFileParams data =
                  DirectoryReadEntireFileParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .readEntireFile(
                      data.path,
                      new DirectoryReadEntireFileResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case WRITE_FILE_ORDINAL:
            {
              DirectoryWriteFileParams data =
                  DirectoryWriteFileParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .writeFile(
                      data.path,
                      data.data,
                      new DirectoryWriteFileResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          default:
            return false;
        }
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        System.err.println(e.toString());
        return false;
      }
    }
  }

  static final class DirectoryReadParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private DirectoryReadParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryReadParams() {
      this(0);
    }

    public static DirectoryReadParams deserialize(org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryReadParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryReadParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryReadParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryReadParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class DirectoryReadResponseParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int error;
    public DirectoryEntry[] directoryContents;

    private DirectoryReadResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryReadResponseParams() {
      this(0);
    }

    public static DirectoryReadResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryReadResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryReadResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryReadResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryReadResponseParams(elementsOrVersion);
        {
          result.error = decoder0.readInt(8);
          org.chromium.mojo_base.mojom.FileError.validate(result.error);
          result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
        }
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
          if (decoder1 == null) {
            result.directoryContents = null;
          } else {
            org.chromium.mojo.bindings.DataHeader si1 =
                decoder1.readDataHeaderForPointerArray(
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            result.directoryContents = new DirectoryEntry[si1.elementsOrVersion];
            for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

              org.chromium.mojo.bindings.Decoder decoder2 =
                  decoder1.readPointer(
                      org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                          + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                      false);
              result.directoryContents[i1] = DirectoryEntry.decode(decoder2);
            }
          }
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.error, 8);

      if (this.directoryContents == null) {
        encoder0.encodeNullPointer(16, true);
      } else {
        org.chromium.mojo.bindings.Encoder encoder1 =
            encoder0.encodePointerArray(
                this.directoryContents.length,
                16,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i0 = 0; i0 < this.directoryContents.length; ++i0) {

          encoder1.encode(
              this.directoryContents[i0],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0,
              false);
        }
      }
    }
  }

  static class DirectoryReadResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final Directory.Read_Response mCallback;

    DirectoryReadResponseParamsForwardToCallback(Directory.Read_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            READ_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          return false;
        }

        DirectoryReadResponseParams response =
            DirectoryReadResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.error, response.directoryContents);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class DirectoryReadResponseParamsProxyToResponder implements Directory.Read_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    DirectoryReadResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(int error, DirectoryEntry[] directoryContents) {
      DirectoryReadResponseParams _response = new DirectoryReadResponseParams();

      _response.error = error;

      _response.directoryContents = directoryContents;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  READ_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                      | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class DirectoryOpenFileHandleParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public String path;
    public int openFlags;

    private DirectoryOpenFileHandleParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryOpenFileHandleParams() {
      this(0);
    }

    public static DirectoryOpenFileHandleParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryOpenFileHandleParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryOpenFileHandleParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryOpenFileHandleParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryOpenFileHandleParams(elementsOrVersion);
        {
          result.path = decoder0.readString(8, false);
        }
        {
          result.openFlags = decoder0.readInt(16);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.path, 8, false);

      encoder0.encode(this.openFlags, 16);
    }
  }

  static final class DirectoryOpenFileHandleResponseParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int error;
    public org.chromium.mojo_base.mojom.File fileHandle;

    private DirectoryOpenFileHandleResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryOpenFileHandleResponseParams() {
      this(0);
    }

    public static DirectoryOpenFileHandleResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryOpenFileHandleResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryOpenFileHandleResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryOpenFileHandleResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryOpenFileHandleResponseParams(elementsOrVersion);
        {
          result.error = decoder0.readInt(8);
          org.chromium.mojo_base.mojom.FileError.validate(result.error);
          result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
        }
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
          result.fileHandle = org.chromium.mojo_base.mojom.File.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.error, 8);

      encoder0.encode(this.fileHandle, 16, true);
    }
  }

  static class DirectoryOpenFileHandleResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final Directory.OpenFileHandle_Response mCallback;

    DirectoryOpenFileHandleResponseParamsForwardToCallback(
        Directory.OpenFileHandle_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            OPEN_FILE_HANDLE_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          return false;
        }

        DirectoryOpenFileHandleResponseParams response =
            DirectoryOpenFileHandleResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.error, response.fileHandle);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class DirectoryOpenFileHandleResponseParamsProxyToResponder
      implements Directory.OpenFileHandle_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    DirectoryOpenFileHandleResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(int error, org.chromium.mojo_base.mojom.File fileHandle) {
      DirectoryOpenFileHandleResponseParams _response = new DirectoryOpenFileHandleResponseParams();

      _response.error = error;

      _response.fileHandle = fileHandle;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  OPEN_FILE_HANDLE_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                      | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class DirectoryOpenFileHandlesParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public FileOpenDetails[] files;

    private DirectoryOpenFileHandlesParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryOpenFileHandlesParams() {
      this(0);
    }

    public static DirectoryOpenFileHandlesParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryOpenFileHandlesParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryOpenFileHandlesParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryOpenFileHandlesParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryOpenFileHandlesParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          {
            org.chromium.mojo.bindings.DataHeader si1 =
                decoder1.readDataHeaderForPointerArray(
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            result.files = new FileOpenDetails[si1.elementsOrVersion];
            for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

              org.chromium.mojo.bindings.Decoder decoder2 =
                  decoder1.readPointer(
                      org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                          + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                      false);
              result.files[i1] = FileOpenDetails.decode(decoder2);
            }
          }
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      if (this.files == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        org.chromium.mojo.bindings.Encoder encoder1 =
            encoder0.encodePointerArray(
                this.files.length,
                8,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i0 = 0; i0 < this.files.length; ++i0) {

          encoder1.encode(
              this.files[i0],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0,
              false);
        }
      }
    }
  }

  static final class DirectoryOpenFileHandlesResponseParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public FileOpenResult[] results;

    private DirectoryOpenFileHandlesResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryOpenFileHandlesResponseParams() {
      this(0);
    }

    public static DirectoryOpenFileHandlesResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryOpenFileHandlesResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryOpenFileHandlesResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryOpenFileHandlesResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryOpenFileHandlesResponseParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          {
            org.chromium.mojo.bindings.DataHeader si1 =
                decoder1.readDataHeaderForPointerArray(
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            result.results = new FileOpenResult[si1.elementsOrVersion];
            for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

              org.chromium.mojo.bindings.Decoder decoder2 =
                  decoder1.readPointer(
                      org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                          + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                      false);
              result.results[i1] = FileOpenResult.decode(decoder2);
            }
          }
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      if (this.results == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        org.chromium.mojo.bindings.Encoder encoder1 =
            encoder0.encodePointerArray(
                this.results.length,
                8,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i0 = 0; i0 < this.results.length; ++i0) {

          encoder1.encode(
              this.results[i0],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0,
              false);
        }
      }
    }
  }

  static class DirectoryOpenFileHandlesResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final Directory.OpenFileHandles_Response mCallback;

    DirectoryOpenFileHandlesResponseParamsForwardToCallback(
        Directory.OpenFileHandles_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            OPEN_FILE_HANDLES_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          return false;
        }

        DirectoryOpenFileHandlesResponseParams response =
            DirectoryOpenFileHandlesResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.results);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class DirectoryOpenFileHandlesResponseParamsProxyToResponder
      implements Directory.OpenFileHandles_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    DirectoryOpenFileHandlesResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(FileOpenResult[] results) {
      DirectoryOpenFileHandlesResponseParams _response =
          new DirectoryOpenFileHandlesResponseParams();

      _response.results = results;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  OPEN_FILE_HANDLES_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                      | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class DirectoryOpenDirectoryParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public String path;
    public org.chromium.mojo.bindings.InterfaceRequest<Directory> directory;
    public int openFlags;

    private DirectoryOpenDirectoryParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryOpenDirectoryParams() {
      this(0);
    }

    public static DirectoryOpenDirectoryParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryOpenDirectoryParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryOpenDirectoryParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryOpenDirectoryParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryOpenDirectoryParams(elementsOrVersion);
        {
          result.path = decoder0.readString(8, false);
        }
        {
          result.directory = decoder0.readInterfaceRequest(16, true);
        }
        {
          result.openFlags = decoder0.readInt(20);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.path, 8, false);

      encoder0.encode(this.directory, 16, true);

      encoder0.encode(this.openFlags, 20);
    }
  }

  static final class DirectoryOpenDirectoryResponseParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int error;

    private DirectoryOpenDirectoryResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryOpenDirectoryResponseParams() {
      this(0);
    }

    public static DirectoryOpenDirectoryResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryOpenDirectoryResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryOpenDirectoryResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryOpenDirectoryResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryOpenDirectoryResponseParams(elementsOrVersion);
        {
          result.error = decoder0.readInt(8);
          org.chromium.mojo_base.mojom.FileError.validate(result.error);
          result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.error, 8);
    }
  }

  static class DirectoryOpenDirectoryResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final Directory.OpenDirectory_Response mCallback;

    DirectoryOpenDirectoryResponseParamsForwardToCallback(
        Directory.OpenDirectory_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            OPEN_DIRECTORY_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          return false;
        }

        DirectoryOpenDirectoryResponseParams response =
            DirectoryOpenDirectoryResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.error);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class DirectoryOpenDirectoryResponseParamsProxyToResponder
      implements Directory.OpenDirectory_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    DirectoryOpenDirectoryResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(int error) {
      DirectoryOpenDirectoryResponseParams _response = new DirectoryOpenDirectoryResponseParams();

      _response.error = error;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  OPEN_DIRECTORY_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                      | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class DirectoryRenameParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public String path;
    public String newPath;

    private DirectoryRenameParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryRenameParams() {
      this(0);
    }

    public static DirectoryRenameParams deserialize(org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryRenameParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryRenameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryRenameParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryRenameParams(elementsOrVersion);
        {
          result.path = decoder0.readString(8, false);
        }
        {
          result.newPath = decoder0.readString(16, false);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.path, 8, false);

      encoder0.encode(this.newPath, 16, false);
    }
  }

  static final class DirectoryRenameResponseParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int error;

    private DirectoryRenameResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryRenameResponseParams() {
      this(0);
    }

    public static DirectoryRenameResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryRenameResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryRenameResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryRenameResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryRenameResponseParams(elementsOrVersion);
        {
          result.error = decoder0.readInt(8);
          org.chromium.mojo_base.mojom.FileError.validate(result.error);
          result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.error, 8);
    }
  }

  static class DirectoryRenameResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final Directory.Rename_Response mCallback;

    DirectoryRenameResponseParamsForwardToCallback(Directory.Rename_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            RENAME_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          return false;
        }

        DirectoryRenameResponseParams response =
            DirectoryRenameResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.error);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class DirectoryRenameResponseParamsProxyToResponder implements Directory.Rename_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    DirectoryRenameResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(int error) {
      DirectoryRenameResponseParams _response = new DirectoryRenameResponseParams();

      _response.error = error;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  RENAME_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                      | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class DirectoryReplaceParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public String path;
    public String newPath;

    private DirectoryReplaceParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryReplaceParams() {
      this(0);
    }

    public static DirectoryReplaceParams deserialize(org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryReplaceParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryReplaceParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryReplaceParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryReplaceParams(elementsOrVersion);
        {
          result.path = decoder0.readString(8, false);
        }
        {
          result.newPath = decoder0.readString(16, false);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.path, 8, false);

      encoder0.encode(this.newPath, 16, false);
    }
  }

  static final class DirectoryReplaceResponseParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int error;

    private DirectoryReplaceResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryReplaceResponseParams() {
      this(0);
    }

    public static DirectoryReplaceResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryReplaceResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryReplaceResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryReplaceResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryReplaceResponseParams(elementsOrVersion);
        {
          result.error = decoder0.readInt(8);
          org.chromium.mojo_base.mojom.FileError.validate(result.error);
          result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.error, 8);
    }
  }

  static class DirectoryReplaceResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final Directory.Replace_Response mCallback;

    DirectoryReplaceResponseParamsForwardToCallback(Directory.Replace_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            REPLACE_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          return false;
        }

        DirectoryReplaceResponseParams response =
            DirectoryReplaceResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.error);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class DirectoryReplaceResponseParamsProxyToResponder
      implements Directory.Replace_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    DirectoryReplaceResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(int error) {
      DirectoryReplaceResponseParams _response = new DirectoryReplaceResponseParams();

      _response.error = error;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  REPLACE_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                      | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class DirectoryDeleteParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public String path;
    public int deleteFlags;

    private DirectoryDeleteParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryDeleteParams() {
      this(0);
    }

    public static DirectoryDeleteParams deserialize(org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryDeleteParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryDeleteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryDeleteParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryDeleteParams(elementsOrVersion);
        {
          result.path = decoder0.readString(8, false);
        }
        {
          result.deleteFlags = decoder0.readInt(16);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.path, 8, false);

      encoder0.encode(this.deleteFlags, 16);
    }
  }

  static final class DirectoryDeleteResponseParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int error;

    private DirectoryDeleteResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryDeleteResponseParams() {
      this(0);
    }

    public static DirectoryDeleteResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryDeleteResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryDeleteResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryDeleteResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryDeleteResponseParams(elementsOrVersion);
        {
          result.error = decoder0.readInt(8);
          org.chromium.mojo_base.mojom.FileError.validate(result.error);
          result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.error, 8);
    }
  }

  static class DirectoryDeleteResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final Directory.Delete_Response mCallback;

    DirectoryDeleteResponseParamsForwardToCallback(Directory.Delete_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            DELETE_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          return false;
        }

        DirectoryDeleteResponseParams response =
            DirectoryDeleteResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.error);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class DirectoryDeleteResponseParamsProxyToResponder implements Directory.Delete_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    DirectoryDeleteResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(int error) {
      DirectoryDeleteResponseParams _response = new DirectoryDeleteResponseParams();

      _response.error = error;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  DELETE_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                      | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class DirectoryExistsParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public String path;

    private DirectoryExistsParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryExistsParams() {
      this(0);
    }

    public static DirectoryExistsParams deserialize(org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryExistsParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryExistsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryExistsParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryExistsParams(elementsOrVersion);
        {
          result.path = decoder0.readString(8, false);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.path, 8, false);
    }
  }

  static final class DirectoryExistsResponseParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int error;
    public boolean exists;

    private DirectoryExistsResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryExistsResponseParams() {
      this(0);
    }

    public static DirectoryExistsResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryExistsResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryExistsResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryExistsResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryExistsResponseParams(elementsOrVersion);
        {
          result.error = decoder0.readInt(8);
          org.chromium.mojo_base.mojom.FileError.validate(result.error);
          result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
        }
        {
          result.exists = decoder0.readBoolean(12, 0);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.error, 8);

      encoder0.encode(this.exists, 12, 0);
    }
  }

  static class DirectoryExistsResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final Directory.Exists_Response mCallback;

    DirectoryExistsResponseParamsForwardToCallback(Directory.Exists_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            EXISTS_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          return false;
        }

        DirectoryExistsResponseParams response =
            DirectoryExistsResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.error, response.exists);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class DirectoryExistsResponseParamsProxyToResponder implements Directory.Exists_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    DirectoryExistsResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(int error, boolean exists) {
      DirectoryExistsResponseParams _response = new DirectoryExistsResponseParams();

      _response.error = error;

      _response.exists = exists;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  EXISTS_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                      | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class DirectoryIsWritableParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public String path;

    private DirectoryIsWritableParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryIsWritableParams() {
      this(0);
    }

    public static DirectoryIsWritableParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryIsWritableParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryIsWritableParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryIsWritableParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryIsWritableParams(elementsOrVersion);
        {
          result.path = decoder0.readString(8, false);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.path, 8, false);
    }
  }

  static final class DirectoryIsWritableResponseParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int error;
    public boolean isWritable;

    private DirectoryIsWritableResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryIsWritableResponseParams() {
      this(0);
    }

    public static DirectoryIsWritableResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryIsWritableResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryIsWritableResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryIsWritableResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryIsWritableResponseParams(elementsOrVersion);
        {
          result.error = decoder0.readInt(8);
          org.chromium.mojo_base.mojom.FileError.validate(result.error);
          result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
        }
        {
          result.isWritable = decoder0.readBoolean(12, 0);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.error, 8);

      encoder0.encode(this.isWritable, 12, 0);
    }
  }

  static class DirectoryIsWritableResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final Directory.IsWritable_Response mCallback;

    DirectoryIsWritableResponseParamsForwardToCallback(Directory.IsWritable_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            IS_WRITABLE_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          return false;
        }

        DirectoryIsWritableResponseParams response =
            DirectoryIsWritableResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.error, response.isWritable);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class DirectoryIsWritableResponseParamsProxyToResponder
      implements Directory.IsWritable_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    DirectoryIsWritableResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(int error, boolean isWritable) {
      DirectoryIsWritableResponseParams _response = new DirectoryIsWritableResponseParams();

      _response.error = error;

      _response.isWritable = isWritable;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  IS_WRITABLE_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                      | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class DirectoryFlushParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private DirectoryFlushParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryFlushParams() {
      this(0);
    }

    public static DirectoryFlushParams deserialize(org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryFlushParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryFlushParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryFlushParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryFlushParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class DirectoryFlushResponseParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int error;

    private DirectoryFlushResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryFlushResponseParams() {
      this(0);
    }

    public static DirectoryFlushResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryFlushResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryFlushResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryFlushResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryFlushResponseParams(elementsOrVersion);
        {
          result.error = decoder0.readInt(8);
          org.chromium.mojo_base.mojom.FileError.validate(result.error);
          result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.error, 8);
    }
  }

  static class DirectoryFlushResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final Directory.Flush_Response mCallback;

    DirectoryFlushResponseParamsForwardToCallback(Directory.Flush_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            FLUSH_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          return false;
        }

        DirectoryFlushResponseParams response =
            DirectoryFlushResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.error);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class DirectoryFlushResponseParamsProxyToResponder implements Directory.Flush_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    DirectoryFlushResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(int error) {
      DirectoryFlushResponseParams _response = new DirectoryFlushResponseParams();

      _response.error = error;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  FLUSH_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                      | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class DirectoryStatFileParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public String path;

    private DirectoryStatFileParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryStatFileParams() {
      this(0);
    }

    public static DirectoryStatFileParams deserialize(org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryStatFileParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryStatFileParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryStatFileParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryStatFileParams(elementsOrVersion);
        {
          result.path = decoder0.readString(8, false);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.path, 8, false);
    }
  }

  static final class DirectoryStatFileResponseParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int error;
    public FileInformation fileInformation;

    private DirectoryStatFileResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryStatFileResponseParams() {
      this(0);
    }

    public static DirectoryStatFileResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryStatFileResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryStatFileResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryStatFileResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryStatFileResponseParams(elementsOrVersion);
        {
          result.error = decoder0.readInt(8);
          org.chromium.mojo_base.mojom.FileError.validate(result.error);
          result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
        }
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
          result.fileInformation = FileInformation.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.error, 8);

      encoder0.encode(this.fileInformation, 16, true);
    }
  }

  static class DirectoryStatFileResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final Directory.StatFile_Response mCallback;

    DirectoryStatFileResponseParamsForwardToCallback(Directory.StatFile_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            STAT_FILE_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          return false;
        }

        DirectoryStatFileResponseParams response =
            DirectoryStatFileResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.error, response.fileInformation);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class DirectoryStatFileResponseParamsProxyToResponder
      implements Directory.StatFile_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    DirectoryStatFileResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(int error, FileInformation fileInformation) {
      DirectoryStatFileResponseParams _response = new DirectoryStatFileResponseParams();

      _response.error = error;

      _response.fileInformation = fileInformation;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  STAT_FILE_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                      | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class DirectoryCloneParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo.bindings.InterfaceRequest<Directory> directory;

    private DirectoryCloneParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryCloneParams() {
      this(0);
    }

    public static DirectoryCloneParams deserialize(org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryCloneParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryCloneParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryCloneParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryCloneParams(elementsOrVersion);
        {
          result.directory = decoder0.readInterfaceRequest(8, false);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.directory, 8, false);
    }
  }

  static final class DirectoryReadEntireFileParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public String path;

    private DirectoryReadEntireFileParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryReadEntireFileParams() {
      this(0);
    }

    public static DirectoryReadEntireFileParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryReadEntireFileParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryReadEntireFileParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryReadEntireFileParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryReadEntireFileParams(elementsOrVersion);
        {
          result.path = decoder0.readString(8, false);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.path, 8, false);
    }
  }

  static final class DirectoryReadEntireFileResponseParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int error;
    public byte[] data;

    private DirectoryReadEntireFileResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryReadEntireFileResponseParams() {
      this(0);
    }

    public static DirectoryReadEntireFileResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryReadEntireFileResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryReadEntireFileResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryReadEntireFileResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryReadEntireFileResponseParams(elementsOrVersion);
        {
          result.error = decoder0.readInt(8);
          org.chromium.mojo_base.mojom.FileError.validate(result.error);
          result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
        }
        {
          result.data =
              decoder0.readBytes(
                  16,
                  org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                  org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.error, 8);

      encoder0.encode(
          this.data,
          16,
          org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
    }
  }

  static class DirectoryReadEntireFileResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final Directory.ReadEntireFile_Response mCallback;

    DirectoryReadEntireFileResponseParamsForwardToCallback(
        Directory.ReadEntireFile_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            READ_ENTIRE_FILE_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          return false;
        }

        DirectoryReadEntireFileResponseParams response =
            DirectoryReadEntireFileResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.error, response.data);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class DirectoryReadEntireFileResponseParamsProxyToResponder
      implements Directory.ReadEntireFile_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    DirectoryReadEntireFileResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(int error, byte[] data) {
      DirectoryReadEntireFileResponseParams _response = new DirectoryReadEntireFileResponseParams();

      _response.error = error;

      _response.data = data;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  READ_ENTIRE_FILE_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                      | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class DirectoryWriteFileParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public String path;
    public byte[] data;

    private DirectoryWriteFileParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryWriteFileParams() {
      this(0);
    }

    public static DirectoryWriteFileParams deserialize(org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryWriteFileParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryWriteFileParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryWriteFileParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryWriteFileParams(elementsOrVersion);
        {
          result.path = decoder0.readString(8, false);
        }
        {
          result.data =
              decoder0.readBytes(
                  16,
                  org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                  org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.path, 8, false);

      encoder0.encode(
          this.data,
          16,
          org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
    }
  }

  static final class DirectoryWriteFileResponseParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int error;

    private DirectoryWriteFileResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public DirectoryWriteFileResponseParams() {
      this(0);
    }

    public static DirectoryWriteFileResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DirectoryWriteFileResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DirectoryWriteFileResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      DirectoryWriteFileResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new DirectoryWriteFileResponseParams(elementsOrVersion);
        {
          result.error = decoder0.readInt(8);
          org.chromium.mojo_base.mojom.FileError.validate(result.error);
          result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.error, 8);
    }
  }

  static class DirectoryWriteFileResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final Directory.WriteFile_Response mCallback;

    DirectoryWriteFileResponseParamsForwardToCallback(Directory.WriteFile_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            WRITE_FILE_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          return false;
        }

        DirectoryWriteFileResponseParams response =
            DirectoryWriteFileResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.error);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class DirectoryWriteFileResponseParamsProxyToResponder
      implements Directory.WriteFile_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    DirectoryWriteFileResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(int error) {
      DirectoryWriteFileResponseParams _response = new DirectoryWriteFileResponseParams();

      _response.error = error;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  WRITE_FILE_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG
                      | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }
}

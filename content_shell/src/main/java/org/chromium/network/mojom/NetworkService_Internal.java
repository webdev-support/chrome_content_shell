// NetworkService_Internal.java is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/network_service.mojom
//

package org.chromium.network.mojom;

class NetworkService_Internal {

  public static final org.chromium.mojo.bindings.Interface.Manager<
          NetworkService, NetworkService.Proxy>
      MANAGER =
          new org.chromium.mojo.bindings.Interface.Manager<NetworkService, NetworkService.Proxy>() {

            @Override
            public String getName() {
              return "network.mojom.NetworkService";
            }

            @Override
            public int getVersion() {
              return 0;
            }

            @Override
            public Proxy buildProxy(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
              return new Proxy(core, messageReceiver);
            }

            @Override
            public Stub buildStub(org.chromium.mojo.system.Core core, NetworkService impl) {
              return new Stub(core, impl);
            }

            @Override
            public NetworkService[] buildArray(int size) {
              return new NetworkService[size];
            }
          };

  private static final int SET_PARAMS_ORDINAL = 0;

  private static final int START_NET_LOG_ORDINAL = 1;

  private static final int ATTACH_NET_LOG_PROXY_ORDINAL = 2;

  private static final int SET_SSL_KEY_LOG_FILE_ORDINAL = 3;

  private static final int CREATE_NETWORK_CONTEXT_ORDINAL = 4;

  private static final int CONFIGURE_STUB_HOST_RESOLVER_ORDINAL = 5;

  private static final int DISABLE_QUIC_ORDINAL = 6;

  private static final int SET_UP_HTTP_AUTH_ORDINAL = 7;

  private static final int CONFIGURE_HTTP_AUTH_PREFS_ORDINAL = 8;

  private static final int SET_RAW_HEADERS_ACCESS_ORDINAL = 9;

  private static final int SET_MAX_CONNECTIONS_PER_PROXY_CHAIN_ORDINAL = 10;

  private static final int GET_NETWORK_CHANGE_MANAGER_ORDINAL = 11;

  private static final int GET_NETWORK_QUALITY_ESTIMATOR_MANAGER_ORDINAL = 12;

  private static final int GET_DNS_CONFIG_CHANGE_MANAGER_ORDINAL = 13;

  private static final int GET_NETWORK_LIST_ORDINAL = 14;

  private static final int ON_TRUST_STORE_CHANGED_ORDINAL = 15;

  private static final int ON_CLIENT_CERT_STORE_CHANGED_ORDINAL = 16;

  private static final int SET_ENCRYPTION_KEY_ORDINAL = 17;

  private static final int ON_MEMORY_PRESSURE_ORDINAL = 18;

  private static final int ON_PEER_TO_PEER_CONNECTIONS_COUNT_CHANGE_ORDINAL = 19;

  private static final int ON_APPLICATION_STATE_CHANGE_ORDINAL = 20;

  private static final int SET_TRUST_TOKEN_KEY_COMMITMENTS_ORDINAL = 21;

  private static final int CLEAR_SCT_AUDITING_CACHE_ORDINAL = 22;

  private static final int CONFIGURE_SCT_AUDITING_ORDINAL = 23;

  private static final int UPDATE_CT_LOG_LIST_ORDINAL = 24;

  private static final int UPDATE_CT_KNOWN_POPULAR_SC_TS_ORDINAL = 25;

  private static final int SET_CT_ENFORCEMENT_ENABLED_ORDINAL = 26;

  private static final int UPDATE_KEY_PINS_LIST_ORDINAL = 27;

  private static final int DUMP_WITHOUT_CRASHING_ORDINAL = 28;

  private static final int BIND_TEST_INTERFACE_FOR_TESTING_ORDINAL = 29;

  private static final int SET_FIRST_PARTY_SETS_ORDINAL = 30;

  private static final int SET_EXPLICITLY_ALLOWED_PORTS_ORDINAL = 31;

  private static final int UPDATE_MASKED_DOMAIN_LIST_ORDINAL = 32;

  private static final int PARSE_HEADERS_ORDINAL = 33;

  private static final int ENABLE_DATA_USE_UPDATES_ORDINAL = 34;

  private static final int SET_I_PV6_REACHABILITY_OVERRIDE_ORDINAL = 35;

  private static final int SET_NETWORK_ANNOTATION_MONITOR_ORDINAL = 36;

  static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy
      implements NetworkService.Proxy {

    Proxy(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
      super(core, messageReceiver);
    }

    @Override
    public void setParams(NetworkServiceParams params) {

      NetworkServiceSetParamsParams _message = new NetworkServiceSetParamsParams();

      _message.params = params;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(SET_PARAMS_ORDINAL)));
    }

    @Override
    public void startNetLog(
        org.chromium.mojo_base.mojom.File file,
        long maxTotalSize,
        int captureMode,
        org.chromium.mojo_base.mojom.DictionaryValue constants) {

      NetworkServiceStartNetLogParams _message = new NetworkServiceStartNetLogParams();

      _message.file = file;

      _message.maxTotalSize = maxTotalSize;

      _message.captureMode = captureMode;

      _message.constants = constants;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(START_NET_LOG_ORDINAL)));
    }

    @Override
    public void attachNetLogProxy(
        NetLogProxySource proxySource,
        org.chromium.mojo.bindings.InterfaceRequest<NetLogProxySink> proxySink) {

      NetworkServiceAttachNetLogProxyParams _message = new NetworkServiceAttachNetLogProxyParams();

      _message.proxySource = proxySource;

      _message.proxySink = proxySink;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(ATTACH_NET_LOG_PROXY_ORDINAL)));
    }

    @Override
    public void setSslKeyLogFile(org.chromium.mojo_base.mojom.File file) {

      NetworkServiceSetSslKeyLogFileParams _message = new NetworkServiceSetSslKeyLogFileParams();

      _message.file = file;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(SET_SSL_KEY_LOG_FILE_ORDINAL)));
    }

    @Override
    public void createNetworkContext(
        org.chromium.mojo.bindings.InterfaceRequest<NetworkContext> context,
        NetworkContextParams params) {

      NetworkServiceCreateNetworkContextParams _message =
          new NetworkServiceCreateNetworkContextParams();

      _message.context = context;

      _message.params = params;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(CREATE_NETWORK_CONTEXT_ORDINAL)));
    }

    @Override
    public void configureStubHostResolver(
        boolean insecureDnsClientEnabled,
        int secureDnsMode,
        DnsOverHttpsConfig dnsOverHttpsConfig,
        boolean additionalDnsTypesEnabled) {

      NetworkServiceConfigureStubHostResolverParams _message =
          new NetworkServiceConfigureStubHostResolverParams();

      _message.insecureDnsClientEnabled = insecureDnsClientEnabled;

      _message.secureDnsMode = secureDnsMode;

      _message.dnsOverHttpsConfig = dnsOverHttpsConfig;

      _message.additionalDnsTypesEnabled = additionalDnsTypesEnabled;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      CONFIGURE_STUB_HOST_RESOLVER_ORDINAL)));
    }

    @Override
    public void disableQuic() {

      NetworkServiceDisableQuicParams _message = new NetworkServiceDisableQuicParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(DISABLE_QUIC_ORDINAL)));
    }

    @Override
    public void setUpHttpAuth(HttpAuthStaticParams httpAuthStaticParams) {

      NetworkServiceSetUpHttpAuthParams _message = new NetworkServiceSetUpHttpAuthParams();

      _message.httpAuthStaticParams = httpAuthStaticParams;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(SET_UP_HTTP_AUTH_ORDINAL)));
    }

    @Override
    public void configureHttpAuthPrefs(HttpAuthDynamicParams httpAuthDynamicParams) {

      NetworkServiceConfigureHttpAuthPrefsParams _message =
          new NetworkServiceConfigureHttpAuthPrefsParams();

      _message.httpAuthDynamicParams = httpAuthDynamicParams;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(CONFIGURE_HTTP_AUTH_PREFS_ORDINAL)));
    }

    @Override
    public void setRawHeadersAccess(
        int processId, org.chromium.url.internal.mojom.Origin[] origins) {

      NetworkServiceSetRawHeadersAccessParams _message =
          new NetworkServiceSetRawHeadersAccessParams();

      _message.processId = processId;

      _message.origins = origins;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(SET_RAW_HEADERS_ACCESS_ORDINAL)));
    }

    @Override
    public void setMaxConnectionsPerProxyChain(int maxConnections) {

      NetworkServiceSetMaxConnectionsPerProxyChainParams _message =
          new NetworkServiceSetMaxConnectionsPerProxyChainParams();

      _message.maxConnections = maxConnections;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      SET_MAX_CONNECTIONS_PER_PROXY_CHAIN_ORDINAL)));
    }

    @Override
    public void getNetworkChangeManager(
        org.chromium.mojo.bindings.InterfaceRequest<NetworkChangeManager> networkChangeManager) {

      NetworkServiceGetNetworkChangeManagerParams _message =
          new NetworkServiceGetNetworkChangeManagerParams();

      _message.networkChangeManager = networkChangeManager;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      GET_NETWORK_CHANGE_MANAGER_ORDINAL)));
    }

    @Override
    public void getNetworkQualityEstimatorManager(
        org.chromium.mojo.bindings.InterfaceRequest<NetworkQualityEstimatorManager> receiver) {

      NetworkServiceGetNetworkQualityEstimatorManagerParams _message =
          new NetworkServiceGetNetworkQualityEstimatorManagerParams();

      _message.receiver = receiver;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      GET_NETWORK_QUALITY_ESTIMATOR_MANAGER_ORDINAL)));
    }

    @Override
    public void getDnsConfigChangeManager(
        org.chromium.mojo.bindings.InterfaceRequest<DnsConfigChangeManager> receiver) {

      NetworkServiceGetDnsConfigChangeManagerParams _message =
          new NetworkServiceGetDnsConfigChangeManagerParams();

      _message.receiver = receiver;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      GET_DNS_CONFIG_CHANGE_MANAGER_ORDINAL)));
    }

    @Override
    public void getNetworkList(int policy, GetNetworkList_Response callback) {

      NetworkServiceGetNetworkListParams _message = new NetworkServiceGetNetworkListParams();

      _message.policy = policy;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      GET_NETWORK_LIST_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new NetworkServiceGetNetworkListResponseParamsForwardToCallback(callback));
    }

    @Override
    public void onTrustStoreChanged() {

      NetworkServiceOnTrustStoreChangedParams _message =
          new NetworkServiceOnTrustStoreChangedParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(ON_TRUST_STORE_CHANGED_ORDINAL)));
    }

    @Override
    public void onClientCertStoreChanged() {

      NetworkServiceOnClientCertStoreChangedParams _message =
          new NetworkServiceOnClientCertStoreChangedParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      ON_CLIENT_CERT_STORE_CHANGED_ORDINAL)));
    }

    @Override
    public void setEncryptionKey(org.chromium.mojo_base.mojom.ByteString encryptionKey) {

      NetworkServiceSetEncryptionKeyParams _message = new NetworkServiceSetEncryptionKeyParams();

      _message.encryptionKey = encryptionKey;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(SET_ENCRYPTION_KEY_ORDINAL)));
    }

    @Override
    public void onMemoryPressure(int memoryPressureLevel) {

      NetworkServiceOnMemoryPressureParams _message = new NetworkServiceOnMemoryPressureParams();

      _message.memoryPressureLevel = memoryPressureLevel;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(ON_MEMORY_PRESSURE_ORDINAL)));
    }

    @Override
    public void onPeerToPeerConnectionsCountChange(int count) {

      NetworkServiceOnPeerToPeerConnectionsCountChangeParams _message =
          new NetworkServiceOnPeerToPeerConnectionsCountChangeParams();

      _message.count = count;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      ON_PEER_TO_PEER_CONNECTIONS_COUNT_CHANGE_ORDINAL)));
    }

    @Override
    public void onApplicationStateChange(int state) {

      NetworkServiceOnApplicationStateChangeParams _message =
          new NetworkServiceOnApplicationStateChangeParams();

      _message.state = state;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      ON_APPLICATION_STATE_CHANGE_ORDINAL)));
    }

    @Override
    public void setTrustTokenKeyCommitments(
        String rawCommitments, SetTrustTokenKeyCommitments_Response callback) {

      NetworkServiceSetTrustTokenKeyCommitmentsParams _message =
          new NetworkServiceSetTrustTokenKeyCommitmentsParams();

      _message.rawCommitments = rawCommitments;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      SET_TRUST_TOKEN_KEY_COMMITMENTS_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new NetworkServiceSetTrustTokenKeyCommitmentsResponseParamsForwardToCallback(
                  callback));
    }

    @Override
    public void clearSctAuditingCache() {

      NetworkServiceClearSctAuditingCacheParams _message =
          new NetworkServiceClearSctAuditingCacheParams();

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(CLEAR_SCT_AUDITING_CACHE_ORDINAL)));
    }

    @Override
    public void configureSctAuditing(SctAuditingConfiguration configuration) {

      NetworkServiceConfigureSctAuditingParams _message =
          new NetworkServiceConfigureSctAuditingParams();

      _message.configuration = configuration;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(CONFIGURE_SCT_AUDITING_ORDINAL)));
    }

    @Override
    public void updateCtLogList(CtLogInfo[] logList, UpdateCtLogList_Response callback) {

      NetworkServiceUpdateCtLogListParams _message = new NetworkServiceUpdateCtLogListParams();

      _message.logList = logList;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      UPDATE_CT_LOG_LIST_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new NetworkServiceUpdateCtLogListResponseParamsForwardToCallback(callback));
    }

    @Override
    public void updateCtKnownPopularScTs(
        byte[][] sctHashes, UpdateCtKnownPopularScTs_Response callback) {

      NetworkServiceUpdateCtKnownPopularScTsParams _message =
          new NetworkServiceUpdateCtKnownPopularScTsParams();

      _message.sctHashes = sctHashes;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      UPDATE_CT_KNOWN_POPULAR_SC_TS_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new NetworkServiceUpdateCtKnownPopularScTsResponseParamsForwardToCallback(callback));
    }

    @Override
    public void setCtEnforcementEnabled(
        boolean enabled, SetCtEnforcementEnabled_Response callback) {

      NetworkServiceSetCtEnforcementEnabledParams _message =
          new NetworkServiceSetCtEnforcementEnabledParams();

      _message.enabled = enabled;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      SET_CT_ENFORCEMENT_ENABLED_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new NetworkServiceSetCtEnforcementEnabledResponseParamsForwardToCallback(callback));
    }

    @Override
    public void updateKeyPinsList(PinList pinList, org.chromium.mojo_base.mojom.Time updateTime) {

      NetworkServiceUpdateKeyPinsListParams _message = new NetworkServiceUpdateKeyPinsListParams();

      _message.pinList = pinList;

      _message.updateTime = updateTime;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(UPDATE_KEY_PINS_LIST_ORDINAL)));
    }

    @Override
    public void dumpWithoutCrashing(org.chromium.mojo_base.mojom.Time dumpRequestTime) {

      NetworkServiceDumpWithoutCrashingParams _message =
          new NetworkServiceDumpWithoutCrashingParams();

      _message.dumpRequestTime = dumpRequestTime;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(DUMP_WITHOUT_CRASHING_ORDINAL)));
    }

    @Override
    public void bindTestInterfaceForTesting(
        org.chromium.mojo.bindings.InterfaceRequest<NetworkServiceTest> receiver) {

      NetworkServiceBindTestInterfaceForTestingParams _message =
          new NetworkServiceBindTestInterfaceForTestingParams();

      _message.receiver = receiver;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      BIND_TEST_INTERFACE_FOR_TESTING_ORDINAL)));
    }

    @Override
    public void setFirstPartySets(GlobalFirstPartySets sets) {

      NetworkServiceSetFirstPartySetsParams _message = new NetworkServiceSetFirstPartySetsParams();

      _message.sets = sets;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(SET_FIRST_PARTY_SETS_ORDINAL)));
    }

    @Override
    public void setExplicitlyAllowedPorts(short[] ports) {

      NetworkServiceSetExplicitlyAllowedPortsParams _message =
          new NetworkServiceSetExplicitlyAllowedPortsParams();

      _message.ports = ports;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      SET_EXPLICITLY_ALLOWED_PORTS_ORDINAL)));
    }

    @Override
    public void updateMaskedDomainList(
        org.chromium.mojo_base.mojom.ByteString rawMdl, String[] exclusionList) {

      NetworkServiceUpdateMaskedDomainListParams _message =
          new NetworkServiceUpdateMaskedDomainListParams();

      _message.rawMdl = rawMdl;

      _message.exclusionList = exclusionList;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(UPDATE_MASKED_DOMAIN_LIST_ORDINAL)));
    }

    @Override
    public void parseHeaders(
        org.chromium.url.mojom.Url url,
        HttpResponseHeaders headers,
        ParseHeaders_Response callback) {

      NetworkServiceParseHeadersParams _message = new NetworkServiceParseHeadersParams();

      _message.url = url;

      _message.headers = headers;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      PARSE_HEADERS_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new NetworkServiceParseHeadersResponseParamsForwardToCallback(callback));
    }

    @Override
    public void enableDataUseUpdates(boolean enable) {

      NetworkServiceEnableDataUseUpdatesParams _message =
          new NetworkServiceEnableDataUseUpdatesParams();

      _message.enable = enable;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(ENABLE_DATA_USE_UPDATES_ORDINAL)));
    }

    @Override
    public void setIPv6ReachabilityOverride(boolean reachabilityOverride) {

      NetworkServiceSetIPv6ReachabilityOverrideParams _message =
          new NetworkServiceSetIPv6ReachabilityOverrideParams();

      _message.reachabilityOverride = reachabilityOverride;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      SET_I_PV6_REACHABILITY_OVERRIDE_ORDINAL)));
    }

    @Override
    public void setNetworkAnnotationMonitor(NetworkAnnotationMonitor remote) {

      NetworkServiceSetNetworkAnnotationMonitorParams _message =
          new NetworkServiceSetNetworkAnnotationMonitorParams();

      _message.remote = remote;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      SET_NETWORK_ANNOTATION_MONITOR_ORDINAL)));
    }
  }

  static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<NetworkService> {

    Stub(org.chromium.mojo.system.Core core, NetworkService impl) {
      super(core, impl);
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
        if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
        }
        if (!header.validateHeader(flags)) {
          return false;
        }
        switch (header.getType()) {
          case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants
              .RUN_OR_CLOSE_PIPE_MESSAGE_ID:
            return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                NetworkService_Internal.MANAGER, messageWithHeader);

          case SET_PARAMS_ORDINAL:
            {
              NetworkServiceSetParamsParams data =
                  NetworkServiceSetParamsParams.deserialize(messageWithHeader.getPayload());

              getImpl().setParams(data.params);
              return true;
            }

          case START_NET_LOG_ORDINAL:
            {
              NetworkServiceStartNetLogParams data =
                  NetworkServiceStartNetLogParams.deserialize(messageWithHeader.getPayload());

              getImpl().startNetLog(data.file, data.maxTotalSize, data.captureMode, data.constants);
              return true;
            }

          case ATTACH_NET_LOG_PROXY_ORDINAL:
            {
              NetworkServiceAttachNetLogProxyParams data =
                  NetworkServiceAttachNetLogProxyParams.deserialize(messageWithHeader.getPayload());

              getImpl().attachNetLogProxy(data.proxySource, data.proxySink);
              return true;
            }

          case SET_SSL_KEY_LOG_FILE_ORDINAL:
            {
              NetworkServiceSetSslKeyLogFileParams data =
                  NetworkServiceSetSslKeyLogFileParams.deserialize(messageWithHeader.getPayload());

              getImpl().setSslKeyLogFile(data.file);
              return true;
            }

          case CREATE_NETWORK_CONTEXT_ORDINAL:
            {
              NetworkServiceCreateNetworkContextParams data =
                  NetworkServiceCreateNetworkContextParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().createNetworkContext(data.context, data.params);
              return true;
            }

          case CONFIGURE_STUB_HOST_RESOLVER_ORDINAL:
            {
              NetworkServiceConfigureStubHostResolverParams data =
                  NetworkServiceConfigureStubHostResolverParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl()
                  .configureStubHostResolver(
                      data.insecureDnsClientEnabled,
                      data.secureDnsMode,
                      data.dnsOverHttpsConfig,
                      data.additionalDnsTypesEnabled);
              return true;
            }

          case DISABLE_QUIC_ORDINAL:
            {
              NetworkServiceDisableQuicParams.deserialize(messageWithHeader.getPayload());

              getImpl().disableQuic();
              return true;
            }

          case SET_UP_HTTP_AUTH_ORDINAL:
            {
              NetworkServiceSetUpHttpAuthParams data =
                  NetworkServiceSetUpHttpAuthParams.deserialize(messageWithHeader.getPayload());

              getImpl().setUpHttpAuth(data.httpAuthStaticParams);
              return true;
            }

          case CONFIGURE_HTTP_AUTH_PREFS_ORDINAL:
            {
              NetworkServiceConfigureHttpAuthPrefsParams data =
                  NetworkServiceConfigureHttpAuthPrefsParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().configureHttpAuthPrefs(data.httpAuthDynamicParams);
              return true;
            }

          case SET_RAW_HEADERS_ACCESS_ORDINAL:
            {
              NetworkServiceSetRawHeadersAccessParams data =
                  NetworkServiceSetRawHeadersAccessParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().setRawHeadersAccess(data.processId, data.origins);
              return true;
            }

          case SET_MAX_CONNECTIONS_PER_PROXY_CHAIN_ORDINAL:
            {
              NetworkServiceSetMaxConnectionsPerProxyChainParams data =
                  NetworkServiceSetMaxConnectionsPerProxyChainParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().setMaxConnectionsPerProxyChain(data.maxConnections);
              return true;
            }

          case GET_NETWORK_CHANGE_MANAGER_ORDINAL:
            {
              NetworkServiceGetNetworkChangeManagerParams data =
                  NetworkServiceGetNetworkChangeManagerParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().getNetworkChangeManager(data.networkChangeManager);
              return true;
            }

          case GET_NETWORK_QUALITY_ESTIMATOR_MANAGER_ORDINAL:
            {
              NetworkServiceGetNetworkQualityEstimatorManagerParams data =
                  NetworkServiceGetNetworkQualityEstimatorManagerParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().getNetworkQualityEstimatorManager(data.receiver);
              return true;
            }

          case GET_DNS_CONFIG_CHANGE_MANAGER_ORDINAL:
            {
              NetworkServiceGetDnsConfigChangeManagerParams data =
                  NetworkServiceGetDnsConfigChangeManagerParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().getDnsConfigChangeManager(data.receiver);
              return true;
            }

          case ON_TRUST_STORE_CHANGED_ORDINAL:
            {
              NetworkServiceOnTrustStoreChangedParams.deserialize(messageWithHeader.getPayload());

              getImpl().onTrustStoreChanged();
              return true;
            }

          case ON_CLIENT_CERT_STORE_CHANGED_ORDINAL:
            {
              NetworkServiceOnClientCertStoreChangedParams.deserialize(
                  messageWithHeader.getPayload());

              getImpl().onClientCertStoreChanged();
              return true;
            }

          case SET_ENCRYPTION_KEY_ORDINAL:
            {
              NetworkServiceSetEncryptionKeyParams data =
                  NetworkServiceSetEncryptionKeyParams.deserialize(messageWithHeader.getPayload());

              getImpl().setEncryptionKey(data.encryptionKey);
              return true;
            }

          case ON_MEMORY_PRESSURE_ORDINAL:
            {
              NetworkServiceOnMemoryPressureParams data =
                  NetworkServiceOnMemoryPressureParams.deserialize(messageWithHeader.getPayload());

              getImpl().onMemoryPressure(data.memoryPressureLevel);
              return true;
            }

          case ON_PEER_TO_PEER_CONNECTIONS_COUNT_CHANGE_ORDINAL:
            {
              NetworkServiceOnPeerToPeerConnectionsCountChangeParams data =
                  NetworkServiceOnPeerToPeerConnectionsCountChangeParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().onPeerToPeerConnectionsCountChange(data.count);
              return true;
            }

          case ON_APPLICATION_STATE_CHANGE_ORDINAL:
            {
              NetworkServiceOnApplicationStateChangeParams data =
                  NetworkServiceOnApplicationStateChangeParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().onApplicationStateChange(data.state);
              return true;
            }

          case CLEAR_SCT_AUDITING_CACHE_ORDINAL:
            {
              NetworkServiceClearSctAuditingCacheParams.deserialize(messageWithHeader.getPayload());

              getImpl().clearSctAuditingCache();
              return true;
            }

          case CONFIGURE_SCT_AUDITING_ORDINAL:
            {
              NetworkServiceConfigureSctAuditingParams data =
                  NetworkServiceConfigureSctAuditingParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().configureSctAuditing(data.configuration);
              return true;
            }

          case UPDATE_KEY_PINS_LIST_ORDINAL:
            {
              NetworkServiceUpdateKeyPinsListParams data =
                  NetworkServiceUpdateKeyPinsListParams.deserialize(messageWithHeader.getPayload());

              getImpl().updateKeyPinsList(data.pinList, data.updateTime);
              return true;
            }

          case DUMP_WITHOUT_CRASHING_ORDINAL:
            {
              NetworkServiceDumpWithoutCrashingParams data =
                  NetworkServiceDumpWithoutCrashingParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().dumpWithoutCrashing(data.dumpRequestTime);
              return true;
            }

          case BIND_TEST_INTERFACE_FOR_TESTING_ORDINAL:
            {
              NetworkServiceBindTestInterfaceForTestingParams data =
                  NetworkServiceBindTestInterfaceForTestingParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().bindTestInterfaceForTesting(data.receiver);
              return true;
            }

          case SET_FIRST_PARTY_SETS_ORDINAL:
            {
              NetworkServiceSetFirstPartySetsParams data =
                  NetworkServiceSetFirstPartySetsParams.deserialize(messageWithHeader.getPayload());

              getImpl().setFirstPartySets(data.sets);
              return true;
            }

          case SET_EXPLICITLY_ALLOWED_PORTS_ORDINAL:
            {
              NetworkServiceSetExplicitlyAllowedPortsParams data =
                  NetworkServiceSetExplicitlyAllowedPortsParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().setExplicitlyAllowedPorts(data.ports);
              return true;
            }

          case UPDATE_MASKED_DOMAIN_LIST_ORDINAL:
            {
              NetworkServiceUpdateMaskedDomainListParams data =
                  NetworkServiceUpdateMaskedDomainListParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().updateMaskedDomainList(data.rawMdl, data.exclusionList);
              return true;
            }

          case ENABLE_DATA_USE_UPDATES_ORDINAL:
            {
              NetworkServiceEnableDataUseUpdatesParams data =
                  NetworkServiceEnableDataUseUpdatesParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().enableDataUseUpdates(data.enable);
              return true;
            }

          case SET_I_PV6_REACHABILITY_OVERRIDE_ORDINAL:
            {
              NetworkServiceSetIPv6ReachabilityOverrideParams data =
                  NetworkServiceSetIPv6ReachabilityOverrideParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().setIPv6ReachabilityOverride(data.reachabilityOverride);
              return true;
            }

          case SET_NETWORK_ANNOTATION_MONITOR_ORDINAL:
            {
              NetworkServiceSetNetworkAnnotationMonitorParams data =
                  NetworkServiceSetNetworkAnnotationMonitorParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().setNetworkAnnotationMonitor(data.remote);
              return true;
            }

          default:
            return false;
        }
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        System.err.println(e.toString());
        return false;
      }
    }

    @Override
    public boolean acceptWithResponder(
        org.chromium.mojo.bindings.Message message,
        org.chromium.mojo.bindings.MessageReceiver receiver) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
        if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
        }
        if (!header.validateHeader(flags)) {
          return false;
        }
        switch (header.getType()) {
          case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants
              .RUN_MESSAGE_ID:
            return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                getCore(), NetworkService_Internal.MANAGER, messageWithHeader, receiver);

          case GET_NETWORK_LIST_ORDINAL:
            {
              NetworkServiceGetNetworkListParams data =
                  NetworkServiceGetNetworkListParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .getNetworkList(
                      data.policy,
                      new NetworkServiceGetNetworkListResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case SET_TRUST_TOKEN_KEY_COMMITMENTS_ORDINAL:
            {
              NetworkServiceSetTrustTokenKeyCommitmentsParams data =
                  NetworkServiceSetTrustTokenKeyCommitmentsParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl()
                  .setTrustTokenKeyCommitments(
                      data.rawCommitments,
                      new NetworkServiceSetTrustTokenKeyCommitmentsResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case UPDATE_CT_LOG_LIST_ORDINAL:
            {
              NetworkServiceUpdateCtLogListParams data =
                  NetworkServiceUpdateCtLogListParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .updateCtLogList(
                      data.logList,
                      new NetworkServiceUpdateCtLogListResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case UPDATE_CT_KNOWN_POPULAR_SC_TS_ORDINAL:
            {
              NetworkServiceUpdateCtKnownPopularScTsParams data =
                  NetworkServiceUpdateCtKnownPopularScTsParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl()
                  .updateCtKnownPopularScTs(
                      data.sctHashes,
                      new NetworkServiceUpdateCtKnownPopularScTsResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case SET_CT_ENFORCEMENT_ENABLED_ORDINAL:
            {
              NetworkServiceSetCtEnforcementEnabledParams data =
                  NetworkServiceSetCtEnforcementEnabledParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl()
                  .setCtEnforcementEnabled(
                      data.enabled,
                      new NetworkServiceSetCtEnforcementEnabledResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          case PARSE_HEADERS_ORDINAL:
            {
              NetworkServiceParseHeadersParams data =
                  NetworkServiceParseHeadersParams.deserialize(messageWithHeader.getPayload());

              getImpl()
                  .parseHeaders(
                      data.url,
                      data.headers,
                      new NetworkServiceParseHeadersResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          default:
            return false;
        }
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        System.err.println(e.toString());
        return false;
      }
    }
  }

  static final class NetworkServiceSetParamsParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public NetworkServiceParams params;

    private NetworkServiceSetParamsParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceSetParamsParams() {
      this(0);
    }

    public static NetworkServiceSetParamsParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceSetParamsParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceSetParamsParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceSetParamsParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceSetParamsParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.params = NetworkServiceParams.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    public final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.params, 8, false);
    }
  }

  static final class NetworkServiceStartNetLogParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 40;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(40, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo_base.mojom.File file;
    public long maxTotalSize;
    public int captureMode;
    public org.chromium.mojo_base.mojom.DictionaryValue constants;

    private NetworkServiceStartNetLogParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceStartNetLogParams() {
      this(0);
    }

    public static NetworkServiceStartNetLogParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceStartNetLogParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceStartNetLogParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceStartNetLogParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceStartNetLogParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.file = org.chromium.mojo_base.mojom.File.decode(decoder1);
        }
        {
          result.maxTotalSize = decoder0.readLong(16);
        }
        {
          result.captureMode = decoder0.readInt(24);
          NetLogCaptureMode.validate(result.captureMode);
          result.captureMode = NetLogCaptureMode.toKnownValue(result.captureMode);
        }
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
          result.constants = org.chromium.mojo_base.mojom.DictionaryValue.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.file, 8, false);

      encoder0.encode(this.maxTotalSize, 16);

      encoder0.encode(this.captureMode, 24);

      encoder0.encode(this.constants, 32, false);
    }
  }

  static final class NetworkServiceAttachNetLogProxyParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public NetLogProxySource proxySource;
    public org.chromium.mojo.bindings.InterfaceRequest<NetLogProxySink> proxySink;

    private NetworkServiceAttachNetLogProxyParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceAttachNetLogProxyParams() {
      this(0);
    }

    public static NetworkServiceAttachNetLogProxyParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceAttachNetLogProxyParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceAttachNetLogProxyParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceAttachNetLogProxyParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceAttachNetLogProxyParams(elementsOrVersion);
        {
          result.proxySource = decoder0.readServiceInterface(8, false, NetLogProxySource.MANAGER);
        }
        {
          result.proxySink = decoder0.readInterfaceRequest(16, false);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.proxySource, 8, false, NetLogProxySource.MANAGER);

      encoder0.encode(this.proxySink, 16, false);
    }
  }

  static final class NetworkServiceSetSslKeyLogFileParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo_base.mojom.File file;

    private NetworkServiceSetSslKeyLogFileParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceSetSslKeyLogFileParams() {
      this(0);
    }

    public static NetworkServiceSetSslKeyLogFileParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceSetSslKeyLogFileParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceSetSslKeyLogFileParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceSetSslKeyLogFileParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceSetSslKeyLogFileParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.file = org.chromium.mojo_base.mojom.File.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.file, 8, false);
    }
  }

  static final class NetworkServiceCreateNetworkContextParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo.bindings.InterfaceRequest<NetworkContext> context;
    public NetworkContextParams params;

    private NetworkServiceCreateNetworkContextParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceCreateNetworkContextParams() {
      this(0);
    }

    public static NetworkServiceCreateNetworkContextParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceCreateNetworkContextParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceCreateNetworkContextParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceCreateNetworkContextParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceCreateNetworkContextParams(elementsOrVersion);
        {
          result.context = decoder0.readInterfaceRequest(8, false);
        }
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
          result.params = NetworkContextParams.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.context, 8, false);

      encoder0.encode(this.params, 16, false);
    }
  }

  static final class NetworkServiceConfigureStubHostResolverParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public boolean insecureDnsClientEnabled;
    public int secureDnsMode;
    public DnsOverHttpsConfig dnsOverHttpsConfig;
    public boolean additionalDnsTypesEnabled;

    private NetworkServiceConfigureStubHostResolverParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceConfigureStubHostResolverParams() {
      this(0);
    }

    public static NetworkServiceConfigureStubHostResolverParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceConfigureStubHostResolverParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceConfigureStubHostResolverParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceConfigureStubHostResolverParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceConfigureStubHostResolverParams(elementsOrVersion);
        {
          result.insecureDnsClientEnabled = decoder0.readBoolean(8, 0);
        }
        {
          result.additionalDnsTypesEnabled = decoder0.readBoolean(8, 1);
        }
        {
          result.secureDnsMode = decoder0.readInt(12);
          SecureDnsMode.validate(result.secureDnsMode);
          result.secureDnsMode = SecureDnsMode.toKnownValue(result.secureDnsMode);
        }
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
          result.dnsOverHttpsConfig = DnsOverHttpsConfig.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.insecureDnsClientEnabled, 8, 0);

      encoder0.encode(this.additionalDnsTypesEnabled, 8, 1);

      encoder0.encode(this.secureDnsMode, 12);

      encoder0.encode(this.dnsOverHttpsConfig, 16, false);
    }
  }

  static final class NetworkServiceDisableQuicParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private NetworkServiceDisableQuicParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceDisableQuicParams() {
      this(0);
    }

    public static NetworkServiceDisableQuicParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceDisableQuicParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceDisableQuicParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceDisableQuicParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceDisableQuicParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class NetworkServiceSetUpHttpAuthParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public HttpAuthStaticParams httpAuthStaticParams;

    private NetworkServiceSetUpHttpAuthParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceSetUpHttpAuthParams() {
      this(0);
    }

    public static NetworkServiceSetUpHttpAuthParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceSetUpHttpAuthParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceSetUpHttpAuthParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceSetUpHttpAuthParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceSetUpHttpAuthParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.httpAuthStaticParams = HttpAuthStaticParams.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.httpAuthStaticParams, 8, false);
    }
  }

  static final class NetworkServiceConfigureHttpAuthPrefsParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public HttpAuthDynamicParams httpAuthDynamicParams;

    private NetworkServiceConfigureHttpAuthPrefsParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceConfigureHttpAuthPrefsParams() {
      this(0);
    }

    public static NetworkServiceConfigureHttpAuthPrefsParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceConfigureHttpAuthPrefsParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceConfigureHttpAuthPrefsParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceConfigureHttpAuthPrefsParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceConfigureHttpAuthPrefsParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.httpAuthDynamicParams = HttpAuthDynamicParams.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.httpAuthDynamicParams, 8, false);
    }
  }

  static final class NetworkServiceSetRawHeadersAccessParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int processId;
    public org.chromium.url.internal.mojom.Origin[] origins;

    private NetworkServiceSetRawHeadersAccessParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceSetRawHeadersAccessParams() {
      this(0);
    }

    public static NetworkServiceSetRawHeadersAccessParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceSetRawHeadersAccessParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceSetRawHeadersAccessParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceSetRawHeadersAccessParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceSetRawHeadersAccessParams(elementsOrVersion);
        {
          result.processId = decoder0.readInt(8);
        }
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
          {
            org.chromium.mojo.bindings.DataHeader si1 =
                decoder1.readDataHeaderForPointerArray(
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            result.origins = new org.chromium.url.internal.mojom.Origin[si1.elementsOrVersion];
            for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

              org.chromium.mojo.bindings.Decoder decoder2 =
                  decoder1.readPointer(
                      org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                          + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                      false);
              result.origins[i1] = org.chromium.url.internal.mojom.Origin.decode(decoder2);
            }
          }
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.processId, 8);

      if (this.origins == null) {
        encoder0.encodeNullPointer(16, false);
      } else {
        org.chromium.mojo.bindings.Encoder encoder1 =
            encoder0.encodePointerArray(
                this.origins.length,
                16,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i0 = 0; i0 < this.origins.length; ++i0) {

          encoder1.encode(
              this.origins[i0],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0,
              false);
        }
      }
    }
  }

  static final class NetworkServiceSetMaxConnectionsPerProxyChainParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int maxConnections;

    private NetworkServiceSetMaxConnectionsPerProxyChainParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceSetMaxConnectionsPerProxyChainParams() {
      this(0);
    }

    public static NetworkServiceSetMaxConnectionsPerProxyChainParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceSetMaxConnectionsPerProxyChainParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceSetMaxConnectionsPerProxyChainParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceSetMaxConnectionsPerProxyChainParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceSetMaxConnectionsPerProxyChainParams(elementsOrVersion);
        {
          result.maxConnections = decoder0.readInt(8);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.maxConnections, 8);
    }
  }

  static final class NetworkServiceGetNetworkChangeManagerParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo.bindings.InterfaceRequest<NetworkChangeManager> networkChangeManager;

    private NetworkServiceGetNetworkChangeManagerParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceGetNetworkChangeManagerParams() {
      this(0);
    }

    public static NetworkServiceGetNetworkChangeManagerParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceGetNetworkChangeManagerParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceGetNetworkChangeManagerParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceGetNetworkChangeManagerParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceGetNetworkChangeManagerParams(elementsOrVersion);
        {
          result.networkChangeManager = decoder0.readInterfaceRequest(8, false);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.networkChangeManager, 8, false);
    }
  }

  static final class NetworkServiceGetNetworkQualityEstimatorManagerParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo.bindings.InterfaceRequest<NetworkQualityEstimatorManager> receiver;

    private NetworkServiceGetNetworkQualityEstimatorManagerParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceGetNetworkQualityEstimatorManagerParams() {
      this(0);
    }

    public static NetworkServiceGetNetworkQualityEstimatorManagerParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceGetNetworkQualityEstimatorManagerParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceGetNetworkQualityEstimatorManagerParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceGetNetworkQualityEstimatorManagerParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceGetNetworkQualityEstimatorManagerParams(elementsOrVersion);
        {
          result.receiver = decoder0.readInterfaceRequest(8, false);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.receiver, 8, false);
    }
  }

  static final class NetworkServiceGetDnsConfigChangeManagerParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo.bindings.InterfaceRequest<DnsConfigChangeManager> receiver;

    private NetworkServiceGetDnsConfigChangeManagerParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceGetDnsConfigChangeManagerParams() {
      this(0);
    }

    public static NetworkServiceGetDnsConfigChangeManagerParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceGetDnsConfigChangeManagerParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceGetDnsConfigChangeManagerParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceGetDnsConfigChangeManagerParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceGetDnsConfigChangeManagerParams(elementsOrVersion);
        {
          result.receiver = decoder0.readInterfaceRequest(8, false);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.receiver, 8, false);
    }
  }

  static final class NetworkServiceGetNetworkListParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int policy;

    private NetworkServiceGetNetworkListParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceGetNetworkListParams() {
      this(0);
    }

    public static NetworkServiceGetNetworkListParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceGetNetworkListParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceGetNetworkListParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceGetNetworkListParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceGetNetworkListParams(elementsOrVersion);
        {
          result.policy = decoder0.readInt(8);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.policy, 8);
    }
  }

  static final class NetworkServiceGetNetworkListResponseParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public NetworkInterface[] networks;

    private NetworkServiceGetNetworkListResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceGetNetworkListResponseParams() {
      this(0);
    }

    public static NetworkServiceGetNetworkListResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceGetNetworkListResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceGetNetworkListResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceGetNetworkListResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceGetNetworkListResponseParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
          if (decoder1 == null) {
            result.networks = null;
          } else {
            org.chromium.mojo.bindings.DataHeader si1 =
                decoder1.readDataHeaderForPointerArray(
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            result.networks = new NetworkInterface[si1.elementsOrVersion];
            for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

              org.chromium.mojo.bindings.Decoder decoder2 =
                  decoder1.readPointer(
                      org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                          + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                      false);
              result.networks[i1] = NetworkInterface.decode(decoder2);
            }
          }
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      if (this.networks == null) {
        encoder0.encodeNullPointer(8, true);
      } else {
        org.chromium.mojo.bindings.Encoder encoder1 =
            encoder0.encodePointerArray(
                this.networks.length,
                8,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i0 = 0; i0 < this.networks.length; ++i0) {

          encoder1.encode(
              this.networks[i0],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0,
              false);
        }
      }
    }
  }

  static class NetworkServiceGetNetworkListResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final NetworkService.GetNetworkList_Response mCallback;

    NetworkServiceGetNetworkListResponseParamsForwardToCallback(
        NetworkService.GetNetworkList_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            GET_NETWORK_LIST_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
          return false;
        }

        NetworkServiceGetNetworkListResponseParams response =
            NetworkServiceGetNetworkListResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.networks);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class NetworkServiceGetNetworkListResponseParamsProxyToResponder
      implements NetworkService.GetNetworkList_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    NetworkServiceGetNetworkListResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(NetworkInterface[] networks) {
      NetworkServiceGetNetworkListResponseParams _response =
          new NetworkServiceGetNetworkListResponseParams();

      _response.networks = networks;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  GET_NETWORK_LIST_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class NetworkServiceOnTrustStoreChangedParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private NetworkServiceOnTrustStoreChangedParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceOnTrustStoreChangedParams() {
      this(0);
    }

    public static NetworkServiceOnTrustStoreChangedParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceOnTrustStoreChangedParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceOnTrustStoreChangedParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceOnTrustStoreChangedParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceOnTrustStoreChangedParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class NetworkServiceOnClientCertStoreChangedParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private NetworkServiceOnClientCertStoreChangedParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceOnClientCertStoreChangedParams() {
      this(0);
    }

    public static NetworkServiceOnClientCertStoreChangedParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceOnClientCertStoreChangedParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceOnClientCertStoreChangedParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceOnClientCertStoreChangedParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceOnClientCertStoreChangedParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class NetworkServiceSetEncryptionKeyParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo_base.mojom.ByteString encryptionKey;

    private NetworkServiceSetEncryptionKeyParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceSetEncryptionKeyParams() {
      this(0);
    }

    public static NetworkServiceSetEncryptionKeyParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceSetEncryptionKeyParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceSetEncryptionKeyParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceSetEncryptionKeyParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceSetEncryptionKeyParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.encryptionKey = org.chromium.mojo_base.mojom.ByteString.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.encryptionKey, 8, false);
    }
  }

  static final class NetworkServiceOnMemoryPressureParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int memoryPressureLevel;

    private NetworkServiceOnMemoryPressureParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceOnMemoryPressureParams() {
      this(0);
    }

    public static NetworkServiceOnMemoryPressureParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceOnMemoryPressureParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceOnMemoryPressureParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceOnMemoryPressureParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceOnMemoryPressureParams(elementsOrVersion);
        {
          result.memoryPressureLevel = decoder0.readInt(8);
          org.chromium.mojo_base.mojom.MemoryPressureLevel.validate(result.memoryPressureLevel);
          result.memoryPressureLevel =
              org.chromium.mojo_base.mojom.MemoryPressureLevel.toKnownValue(
                  result.memoryPressureLevel);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.memoryPressureLevel, 8);
    }
  }

  static final class NetworkServiceOnPeerToPeerConnectionsCountChangeParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int count;

    private NetworkServiceOnPeerToPeerConnectionsCountChangeParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceOnPeerToPeerConnectionsCountChangeParams() {
      this(0);
    }

    public static NetworkServiceOnPeerToPeerConnectionsCountChangeParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceOnPeerToPeerConnectionsCountChangeParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceOnPeerToPeerConnectionsCountChangeParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceOnPeerToPeerConnectionsCountChangeParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceOnPeerToPeerConnectionsCountChangeParams(elementsOrVersion);
        {
          result.count = decoder0.readInt(8);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.count, 8);
    }
  }

  static final class NetworkServiceOnApplicationStateChangeParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int state;

    private NetworkServiceOnApplicationStateChangeParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceOnApplicationStateChangeParams() {
      this(0);
    }

    public static NetworkServiceOnApplicationStateChangeParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceOnApplicationStateChangeParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceOnApplicationStateChangeParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceOnApplicationStateChangeParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceOnApplicationStateChangeParams(elementsOrVersion);
        {
          result.state = decoder0.readInt(8);
          org.chromium.mojo_base.mojom.ApplicationState.validate(result.state);
          result.state = org.chromium.mojo_base.mojom.ApplicationState.toKnownValue(result.state);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.state, 8);
    }
  }

  static final class NetworkServiceSetTrustTokenKeyCommitmentsParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public String rawCommitments;

    private NetworkServiceSetTrustTokenKeyCommitmentsParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceSetTrustTokenKeyCommitmentsParams() {
      this(0);
    }

    public static NetworkServiceSetTrustTokenKeyCommitmentsParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceSetTrustTokenKeyCommitmentsParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceSetTrustTokenKeyCommitmentsParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceSetTrustTokenKeyCommitmentsParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceSetTrustTokenKeyCommitmentsParams(elementsOrVersion);
        {
          result.rawCommitments = decoder0.readString(8, false);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.rawCommitments, 8, false);
    }
  }

  static final class NetworkServiceSetTrustTokenKeyCommitmentsResponseParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private NetworkServiceSetTrustTokenKeyCommitmentsResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceSetTrustTokenKeyCommitmentsResponseParams() {
      this(0);
    }

    public static NetworkServiceSetTrustTokenKeyCommitmentsResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceSetTrustTokenKeyCommitmentsResponseParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceSetTrustTokenKeyCommitmentsResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceSetTrustTokenKeyCommitmentsResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceSetTrustTokenKeyCommitmentsResponseParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static class NetworkServiceSetTrustTokenKeyCommitmentsResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final NetworkService.SetTrustTokenKeyCommitments_Response mCallback;

    NetworkServiceSetTrustTokenKeyCommitmentsResponseParamsForwardToCallback(
        NetworkService.SetTrustTokenKeyCommitments_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            SET_TRUST_TOKEN_KEY_COMMITMENTS_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
          return false;
        }

        mCallback.call();
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class NetworkServiceSetTrustTokenKeyCommitmentsResponseParamsProxyToResponder
      implements NetworkService.SetTrustTokenKeyCommitments_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    NetworkServiceSetTrustTokenKeyCommitmentsResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call() {
      NetworkServiceSetTrustTokenKeyCommitmentsResponseParams _response =
          new NetworkServiceSetTrustTokenKeyCommitmentsResponseParams();

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  SET_TRUST_TOKEN_KEY_COMMITMENTS_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class NetworkServiceClearSctAuditingCacheParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private NetworkServiceClearSctAuditingCacheParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceClearSctAuditingCacheParams() {
      this(0);
    }

    public static NetworkServiceClearSctAuditingCacheParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceClearSctAuditingCacheParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceClearSctAuditingCacheParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceClearSctAuditingCacheParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceClearSctAuditingCacheParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class NetworkServiceConfigureSctAuditingParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public SctAuditingConfiguration configuration;

    private NetworkServiceConfigureSctAuditingParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceConfigureSctAuditingParams() {
      this(0);
    }

    public static NetworkServiceConfigureSctAuditingParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceConfigureSctAuditingParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceConfigureSctAuditingParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceConfigureSctAuditingParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceConfigureSctAuditingParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.configuration = SctAuditingConfiguration.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.configuration, 8, false);
    }
  }

  static final class NetworkServiceUpdateCtLogListParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public CtLogInfo[] logList;

    private NetworkServiceUpdateCtLogListParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceUpdateCtLogListParams() {
      this(0);
    }

    public static NetworkServiceUpdateCtLogListParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceUpdateCtLogListParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceUpdateCtLogListParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceUpdateCtLogListParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceUpdateCtLogListParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          {
            org.chromium.mojo.bindings.DataHeader si1 =
                decoder1.readDataHeaderForPointerArray(
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            result.logList = new CtLogInfo[si1.elementsOrVersion];
            for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

              org.chromium.mojo.bindings.Decoder decoder2 =
                  decoder1.readPointer(
                      org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                          + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                      false);
              result.logList[i1] = CtLogInfo.decode(decoder2);
            }
          }
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      if (this.logList == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        org.chromium.mojo.bindings.Encoder encoder1 =
            encoder0.encodePointerArray(
                this.logList.length,
                8,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i0 = 0; i0 < this.logList.length; ++i0) {

          encoder1.encode(
              this.logList[i0],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0,
              false);
        }
      }
    }
  }

  static final class NetworkServiceUpdateCtLogListResponseParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private NetworkServiceUpdateCtLogListResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceUpdateCtLogListResponseParams() {
      this(0);
    }

    public static NetworkServiceUpdateCtLogListResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceUpdateCtLogListResponseParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceUpdateCtLogListResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceUpdateCtLogListResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceUpdateCtLogListResponseParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static class NetworkServiceUpdateCtLogListResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final NetworkService.UpdateCtLogList_Response mCallback;

    NetworkServiceUpdateCtLogListResponseParamsForwardToCallback(
        NetworkService.UpdateCtLogList_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            UPDATE_CT_LOG_LIST_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
          return false;
        }

        mCallback.call();
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class NetworkServiceUpdateCtLogListResponseParamsProxyToResponder
      implements NetworkService.UpdateCtLogList_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    NetworkServiceUpdateCtLogListResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call() {
      NetworkServiceUpdateCtLogListResponseParams _response =
          new NetworkServiceUpdateCtLogListResponseParams();

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  UPDATE_CT_LOG_LIST_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class NetworkServiceUpdateCtKnownPopularScTsParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public byte[][] sctHashes;

    private NetworkServiceUpdateCtKnownPopularScTsParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceUpdateCtKnownPopularScTsParams() {
      this(0);
    }

    public static NetworkServiceUpdateCtKnownPopularScTsParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceUpdateCtKnownPopularScTsParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceUpdateCtKnownPopularScTsParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceUpdateCtKnownPopularScTsParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceUpdateCtKnownPopularScTsParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          {
            org.chromium.mojo.bindings.DataHeader si1 =
                decoder1.readDataHeaderForPointerArray(
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            result.sctHashes = new byte[si1.elementsOrVersion][];
            for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

              result.sctHashes[i1] =
                  decoder1.readBytes(
                      org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                          + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                      org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                      org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            }
          }
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      if (this.sctHashes == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        org.chromium.mojo.bindings.Encoder encoder1 =
            encoder0.encodePointerArray(
                this.sctHashes.length,
                8,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i0 = 0; i0 < this.sctHashes.length; ++i0) {

          encoder1.encode(
              this.sctHashes[i0],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0,
              org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
              org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
      }
    }
  }

  static final class NetworkServiceUpdateCtKnownPopularScTsResponseParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private NetworkServiceUpdateCtKnownPopularScTsResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceUpdateCtKnownPopularScTsResponseParams() {
      this(0);
    }

    public static NetworkServiceUpdateCtKnownPopularScTsResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceUpdateCtKnownPopularScTsResponseParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceUpdateCtKnownPopularScTsResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceUpdateCtKnownPopularScTsResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceUpdateCtKnownPopularScTsResponseParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static class NetworkServiceUpdateCtKnownPopularScTsResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final NetworkService.UpdateCtKnownPopularScTs_Response mCallback;

    NetworkServiceUpdateCtKnownPopularScTsResponseParamsForwardToCallback(
        NetworkService.UpdateCtKnownPopularScTs_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            UPDATE_CT_KNOWN_POPULAR_SC_TS_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
          return false;
        }

        mCallback.call();
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class NetworkServiceUpdateCtKnownPopularScTsResponseParamsProxyToResponder
      implements NetworkService.UpdateCtKnownPopularScTs_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    NetworkServiceUpdateCtKnownPopularScTsResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call() {
      NetworkServiceUpdateCtKnownPopularScTsResponseParams _response =
          new NetworkServiceUpdateCtKnownPopularScTsResponseParams();

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  UPDATE_CT_KNOWN_POPULAR_SC_TS_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class NetworkServiceSetCtEnforcementEnabledParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public boolean enabled;

    private NetworkServiceSetCtEnforcementEnabledParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceSetCtEnforcementEnabledParams() {
      this(0);
    }

    public static NetworkServiceSetCtEnforcementEnabledParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceSetCtEnforcementEnabledParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceSetCtEnforcementEnabledParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceSetCtEnforcementEnabledParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceSetCtEnforcementEnabledParams(elementsOrVersion);
        {
          result.enabled = decoder0.readBoolean(8, 0);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.enabled, 8, 0);
    }
  }

  static final class NetworkServiceSetCtEnforcementEnabledResponseParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private NetworkServiceSetCtEnforcementEnabledResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceSetCtEnforcementEnabledResponseParams() {
      this(0);
    }

    public static NetworkServiceSetCtEnforcementEnabledResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceSetCtEnforcementEnabledResponseParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceSetCtEnforcementEnabledResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceSetCtEnforcementEnabledResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceSetCtEnforcementEnabledResponseParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static class NetworkServiceSetCtEnforcementEnabledResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final NetworkService.SetCtEnforcementEnabled_Response mCallback;

    NetworkServiceSetCtEnforcementEnabledResponseParamsForwardToCallback(
        NetworkService.SetCtEnforcementEnabled_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            SET_CT_ENFORCEMENT_ENABLED_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
          return false;
        }

        mCallback.call();
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class NetworkServiceSetCtEnforcementEnabledResponseParamsProxyToResponder
      implements NetworkService.SetCtEnforcementEnabled_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    NetworkServiceSetCtEnforcementEnabledResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call() {
      NetworkServiceSetCtEnforcementEnabledResponseParams _response =
          new NetworkServiceSetCtEnforcementEnabledResponseParams();

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  SET_CT_ENFORCEMENT_ENABLED_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class NetworkServiceUpdateKeyPinsListParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public PinList pinList;
    public org.chromium.mojo_base.mojom.Time updateTime;

    private NetworkServiceUpdateKeyPinsListParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceUpdateKeyPinsListParams() {
      this(0);
    }

    public static NetworkServiceUpdateKeyPinsListParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceUpdateKeyPinsListParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceUpdateKeyPinsListParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceUpdateKeyPinsListParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceUpdateKeyPinsListParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.pinList = PinList.decode(decoder1);
        }
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
          result.updateTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.pinList, 8, false);

      encoder0.encode(this.updateTime, 16, false);
    }
  }

  static final class NetworkServiceDumpWithoutCrashingParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo_base.mojom.Time dumpRequestTime;

    private NetworkServiceDumpWithoutCrashingParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceDumpWithoutCrashingParams() {
      this(0);
    }

    public static NetworkServiceDumpWithoutCrashingParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceDumpWithoutCrashingParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceDumpWithoutCrashingParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceDumpWithoutCrashingParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceDumpWithoutCrashingParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.dumpRequestTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.dumpRequestTime, 8, false);
    }
  }

  static final class NetworkServiceBindTestInterfaceForTestingParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo.bindings.InterfaceRequest<NetworkServiceTest> receiver;

    private NetworkServiceBindTestInterfaceForTestingParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceBindTestInterfaceForTestingParams() {
      this(0);
    }

    public static NetworkServiceBindTestInterfaceForTestingParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceBindTestInterfaceForTestingParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceBindTestInterfaceForTestingParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceBindTestInterfaceForTestingParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceBindTestInterfaceForTestingParams(elementsOrVersion);
        {
          result.receiver = decoder0.readInterfaceRequest(8, false);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.receiver, 8, false);
    }
  }

  static final class NetworkServiceSetFirstPartySetsParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public GlobalFirstPartySets sets;

    private NetworkServiceSetFirstPartySetsParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceSetFirstPartySetsParams() {
      this(0);
    }

    public static NetworkServiceSetFirstPartySetsParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceSetFirstPartySetsParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceSetFirstPartySetsParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceSetFirstPartySetsParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceSetFirstPartySetsParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.sets = GlobalFirstPartySets.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.sets, 8, false);
    }
  }

  static final class NetworkServiceSetExplicitlyAllowedPortsParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public short[] ports;

    private NetworkServiceSetExplicitlyAllowedPortsParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceSetExplicitlyAllowedPortsParams() {
      this(0);
    }

    public static NetworkServiceSetExplicitlyAllowedPortsParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceSetExplicitlyAllowedPortsParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceSetExplicitlyAllowedPortsParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceSetExplicitlyAllowedPortsParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceSetExplicitlyAllowedPortsParams(elementsOrVersion);
        {
          result.ports =
              decoder0.readShorts(
                  8,
                  org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                  org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(
          this.ports,
          8,
          org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
    }
  }

  static final class NetworkServiceUpdateMaskedDomainListParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo_base.mojom.ByteString rawMdl;
    public String[] exclusionList;

    private NetworkServiceUpdateMaskedDomainListParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceUpdateMaskedDomainListParams() {
      this(0);
    }

    public static NetworkServiceUpdateMaskedDomainListParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceUpdateMaskedDomainListParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceUpdateMaskedDomainListParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceUpdateMaskedDomainListParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceUpdateMaskedDomainListParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.rawMdl = org.chromium.mojo_base.mojom.ByteString.decode(decoder1);
        }
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
          {
            org.chromium.mojo.bindings.DataHeader si1 =
                decoder1.readDataHeaderForPointerArray(
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            result.exclusionList = new String[si1.elementsOrVersion];
            for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

              result.exclusionList[i1] =
                  decoder1.readString(
                      org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                          + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                      false);
            }
          }
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.rawMdl, 8, false);

      if (this.exclusionList == null) {
        encoder0.encodeNullPointer(16, false);
      } else {
        org.chromium.mojo.bindings.Encoder encoder1 =
            encoder0.encodePointerArray(
                this.exclusionList.length,
                16,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i0 = 0; i0 < this.exclusionList.length; ++i0) {

          encoder1.encode(
              this.exclusionList[i0],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0,
              false);
        }
      }
    }
  }

  static final class NetworkServiceParseHeadersParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.url.mojom.Url url;
    public HttpResponseHeaders headers;

    private NetworkServiceParseHeadersParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceParseHeadersParams() {
      this(0);
    }

    public static NetworkServiceParseHeadersParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceParseHeadersParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceParseHeadersParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceParseHeadersParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceParseHeadersParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.url = org.chromium.url.mojom.Url.decode(decoder1);
        }
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
          result.headers = HttpResponseHeaders.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.url, 8, false);

      encoder0.encode(this.headers, 16, false);
    }
  }

  static final class NetworkServiceParseHeadersResponseParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public ParsedHeaders parsedHeaders;

    private NetworkServiceParseHeadersResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceParseHeadersResponseParams() {
      this(0);
    }

    public static NetworkServiceParseHeadersResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceParseHeadersResponseParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceParseHeadersResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceParseHeadersResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceParseHeadersResponseParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          result.parsedHeaders = ParsedHeaders.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.parsedHeaders, 8, false);
    }
  }

  static class NetworkServiceParseHeadersResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final NetworkService.ParseHeaders_Response mCallback;

    NetworkServiceParseHeadersResponseParamsForwardToCallback(
        NetworkService.ParseHeaders_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            PARSE_HEADERS_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
          return false;
        }

        NetworkServiceParseHeadersResponseParams response =
            NetworkServiceParseHeadersResponseParams.deserialize(messageWithHeader.getPayload());

        mCallback.call(response.parsedHeaders);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class NetworkServiceParseHeadersResponseParamsProxyToResponder
      implements NetworkService.ParseHeaders_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    NetworkServiceParseHeadersResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(ParsedHeaders parsedHeaders) {
      NetworkServiceParseHeadersResponseParams _response =
          new NetworkServiceParseHeadersResponseParams();

      _response.parsedHeaders = parsedHeaders;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  PARSE_HEADERS_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }

  static final class NetworkServiceEnableDataUseUpdatesParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public boolean enable;

    private NetworkServiceEnableDataUseUpdatesParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceEnableDataUseUpdatesParams() {
      this(0);
    }

    public static NetworkServiceEnableDataUseUpdatesParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceEnableDataUseUpdatesParams deserialize(java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceEnableDataUseUpdatesParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceEnableDataUseUpdatesParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceEnableDataUseUpdatesParams(elementsOrVersion);
        {
          result.enable = decoder0.readBoolean(8, 0);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.enable, 8, 0);
    }
  }

  static final class NetworkServiceSetIPv6ReachabilityOverrideParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public boolean reachabilityOverride;

    private NetworkServiceSetIPv6ReachabilityOverrideParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceSetIPv6ReachabilityOverrideParams() {
      this(0);
    }

    public static NetworkServiceSetIPv6ReachabilityOverrideParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceSetIPv6ReachabilityOverrideParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceSetIPv6ReachabilityOverrideParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceSetIPv6ReachabilityOverrideParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceSetIPv6ReachabilityOverrideParams(elementsOrVersion);
        {
          result.reachabilityOverride = decoder0.readBoolean(8, 0);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.reachabilityOverride, 8, 0);
    }
  }

  static final class NetworkServiceSetNetworkAnnotationMonitorParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public NetworkAnnotationMonitor remote;

    private NetworkServiceSetNetworkAnnotationMonitorParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public NetworkServiceSetNetworkAnnotationMonitorParams() {
      this(0);
    }

    public static NetworkServiceSetNetworkAnnotationMonitorParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkServiceSetNetworkAnnotationMonitorParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkServiceSetNetworkAnnotationMonitorParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      NetworkServiceSetNetworkAnnotationMonitorParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new NetworkServiceSetNetworkAnnotationMonitorParams(elementsOrVersion);
        {
          result.remote = decoder0.readServiceInterface(8, false, NetworkAnnotationMonitor.MANAGER);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.remote, 8, false, NetworkAnnotationMonitor.MANAGER);
    }
  }
}

// CookieManagerParams.java is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/cookie_manager.mojom
//

package org.chromium.network.mojom;

public final class CookieManagerParams extends org.chromium.mojo.bindings.Struct {

  private static final int STRUCT_SIZE = 48;
  private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
      new org.chromium.mojo.bindings.DataHeader[] {
        new org.chromium.mojo.bindings.DataHeader(48, 0)
      };
  private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
  public boolean blockThirdPartyCookies;
  public boolean blockTruncatedCookies;
  public boolean trackingProtectionEnabledFor3pcd;
  public boolean mitigationsEnabledFor3pcd;
  public java.util.Map<Integer, org.chromium.content_settings.mojom.ContentSettingPatternSource[]>
      contentSettings;
  public String[] secureOriginCookiesAllowedSchemes;
  public String[] matchingSchemeCookiesAllowedSchemes;
  public String[] thirdPartyCookiesAllowedSchemes;
  public boolean allowFileSchemeCookies;
  public int cookieAccessDelegateType;

  private CookieManagerParams(int version) {
    super(STRUCT_SIZE, version);
    this.blockThirdPartyCookies = (boolean) false;
    this.blockTruncatedCookies = (boolean) true;
    this.trackingProtectionEnabledFor3pcd = (boolean) false;
    this.mitigationsEnabledFor3pcd = (boolean) false;
    this.allowFileSchemeCookies = (boolean) false;
    this.cookieAccessDelegateType = (int) CookieAccessDelegateType.USE_CONTENT_SETTINGS;
  }

  public CookieManagerParams() {
    this(0);
  }

  public static CookieManagerParams deserialize(org.chromium.mojo.bindings.Message message) {
    return decode(new org.chromium.mojo.bindings.Decoder(message));
  }

  /**
   * Similar to the method above, but deserializes from a |ByteBuffer| instance.
   *
   * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
   */
  public static CookieManagerParams deserialize(java.nio.ByteBuffer data) {
    return deserialize(
        new org.chromium.mojo.bindings.Message(
            data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
  }

  @SuppressWarnings("unchecked")
  public static CookieManagerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    decoder0.increaseStackDepth();
    CookieManagerParams result;
    try {
      org.chromium.mojo.bindings.DataHeader mainDataHeader =
          decoder0.readAndValidateDataHeader(VERSION_ARRAY);
      final int elementsOrVersion = mainDataHeader.elementsOrVersion;
      result = new CookieManagerParams(elementsOrVersion);
      {
        result.blockThirdPartyCookies = decoder0.readBoolean(8, 0);
      }
      {
        result.blockTruncatedCookies = decoder0.readBoolean(8, 1);
      }
      {
        result.trackingProtectionEnabledFor3pcd = decoder0.readBoolean(8, 2);
      }
      {
        result.mitigationsEnabledFor3pcd = decoder0.readBoolean(8, 3);
      }
      {
        result.allowFileSchemeCookies = decoder0.readBoolean(8, 4);
      }
      {
        result.cookieAccessDelegateType = decoder0.readInt(12);
        CookieAccessDelegateType.validate(result.cookieAccessDelegateType);
        result.cookieAccessDelegateType =
            CookieAccessDelegateType.toKnownValue(result.cookieAccessDelegateType);
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
        {
          decoder1.readDataHeaderForMap();
          int[] keys0;
          org.chromium.content_settings.mojom.ContentSettingPatternSource[][] values0;
          {
            keys0 =
                decoder1.readInts(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
                    org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            {
              for (int i2 = 0; i2 < keys0.length; ++i2) {
                org.chromium.components.content_settings.ContentSettingsType.validate(keys0[i2]);
              }
            }
          }
          {
            org.chromium.mojo.bindings.Decoder decoder2 =
                decoder1.readPointer(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                    false);
            {
              org.chromium.mojo.bindings.DataHeader si2 =
                  decoder2.readDataHeaderForPointerArray(keys0.length);
              values0 =
                  new org.chromium.content_settings.mojom.ContentSettingPatternSource
                      [si2.elementsOrVersion][];
              for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {

                org.chromium.mojo.bindings.Decoder decoder3 =
                    decoder2.readPointer(
                        org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                            + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2,
                        false);
                {
                  org.chromium.mojo.bindings.DataHeader si3 =
                      decoder3.readDataHeaderForPointerArray(
                          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                  values0[i2] =
                      new org.chromium.content_settings.mojom.ContentSettingPatternSource
                          [si3.elementsOrVersion];
                  for (int i3 = 0; i3 < si3.elementsOrVersion; ++i3) {

                    org.chromium.mojo.bindings.Decoder decoder4 =
                        decoder3.readPointer(
                            org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                                + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i3,
                            false);
                    values0[i2][i3] =
                        org.chromium.content_settings.mojom.ContentSettingPatternSource.decode(
                            decoder4);
                  }
                }
              }
            }
          }
          result.contentSettings =
              new java.util.HashMap<
                  Integer, org.chromium.content_settings.mojom.ContentSettingPatternSource[]>();
          for (int index0 = 0; index0 < keys0.length; ++index0) {
            result.contentSettings.put(keys0[index0], values0[index0]);
          }
        }
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
        {
          org.chromium.mojo.bindings.DataHeader si1 =
              decoder1.readDataHeaderForPointerArray(
                  org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
          result.secureOriginCookiesAllowedSchemes = new String[si1.elementsOrVersion];
          for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

            result.secureOriginCookiesAllowedSchemes[i1] =
                decoder1.readString(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                    false);
          }
        }
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
        {
          org.chromium.mojo.bindings.DataHeader si1 =
              decoder1.readDataHeaderForPointerArray(
                  org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
          result.matchingSchemeCookiesAllowedSchemes = new String[si1.elementsOrVersion];
          for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

            result.matchingSchemeCookiesAllowedSchemes[i1] =
                decoder1.readString(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                    false);
          }
        }
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
        {
          org.chromium.mojo.bindings.DataHeader si1 =
              decoder1.readDataHeaderForPointerArray(
                  org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
          result.thirdPartyCookiesAllowedSchemes = new String[si1.elementsOrVersion];
          for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

            result.thirdPartyCookiesAllowedSchemes[i1] =
                decoder1.readString(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                    false);
          }
        }
      }

    } finally {
      decoder0.decreaseStackDepth();
    }
    return result;
  }

  @SuppressWarnings("unchecked")
  @Override
  public final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    org.chromium.mojo.bindings.Encoder encoder0 =
        encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

    encoder0.encode(this.blockThirdPartyCookies, 8, 0);

    encoder0.encode(this.blockTruncatedCookies, 8, 1);

    encoder0.encode(this.trackingProtectionEnabledFor3pcd, 8, 2);

    encoder0.encode(this.mitigationsEnabledFor3pcd, 8, 3);

    encoder0.encode(this.allowFileSchemeCookies, 8, 4);

    encoder0.encode(this.cookieAccessDelegateType, 12);

    if (this.contentSettings == null) {
      encoder0.encodeNullPointer(16, false);
    } else {
      org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(16);
      int size0 = this.contentSettings.size();
      int[] keys0 = new int[size0];
      org.chromium.content_settings.mojom.ContentSettingPatternSource[][] values0 =
          new org.chromium.content_settings.mojom.ContentSettingPatternSource[size0][];
      int index0 = 0;
      for (java.util.Map.Entry<
              Integer, org.chromium.content_settings.mojom.ContentSettingPatternSource[]>
          entry0 : this.contentSettings.entrySet()) {
        keys0[index0] = entry0.getKey();
        values0[index0] = entry0.getValue();
        ++index0;
      }

      encoder1.encode(
          keys0,
          org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
          org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);

      {
        org.chromium.mojo.bindings.Encoder encoder2 =
            encoder1.encodePointerArray(
                values0.length,
                org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                    + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i1 = 0; i1 < values0.length; ++i1) {

          if (values0[i1] == null) {
            encoder2.encodeNullPointer(
                org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                    + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                false);
          } else {
            org.chromium.mojo.bindings.Encoder encoder3 =
                encoder2.encodePointerArray(
                    values0[i1].length,
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i2 = 0; i2 < values0[i1].length; ++i2) {

              encoder3.encode(
                  values0[i1][i2],
                  org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                      + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2,
                  false);
            }
          }
        }
      }
    }

    if (this.secureOriginCookiesAllowedSchemes == null) {
      encoder0.encodeNullPointer(24, false);
    } else {
      org.chromium.mojo.bindings.Encoder encoder1 =
          encoder0.encodePointerArray(
              this.secureOriginCookiesAllowedSchemes.length,
              24,
              org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
      for (int i0 = 0; i0 < this.secureOriginCookiesAllowedSchemes.length; ++i0) {

        encoder1.encode(
            this.secureOriginCookiesAllowedSchemes[i0],
            org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0,
            false);
      }
    }

    if (this.matchingSchemeCookiesAllowedSchemes == null) {
      encoder0.encodeNullPointer(32, false);
    } else {
      org.chromium.mojo.bindings.Encoder encoder1 =
          encoder0.encodePointerArray(
              this.matchingSchemeCookiesAllowedSchemes.length,
              32,
              org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
      for (int i0 = 0; i0 < this.matchingSchemeCookiesAllowedSchemes.length; ++i0) {

        encoder1.encode(
            this.matchingSchemeCookiesAllowedSchemes[i0],
            org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0,
            false);
      }
    }

    if (this.thirdPartyCookiesAllowedSchemes == null) {
      encoder0.encodeNullPointer(40, false);
    } else {
      org.chromium.mojo.bindings.Encoder encoder1 =
          encoder0.encodePointerArray(
              this.thirdPartyCookiesAllowedSchemes.length,
              40,
              org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
      for (int i0 = 0; i0 < this.thirdPartyCookiesAllowedSchemes.length; ++i0) {

        encoder1.encode(
            this.thirdPartyCookiesAllowedSchemes[i0],
            org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0,
            false);
      }
    }
  }
}

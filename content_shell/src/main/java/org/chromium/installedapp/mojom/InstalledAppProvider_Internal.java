// InstalledAppProvider_Internal.java is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/installedapp/installed_app_provider.mojom
//

package org.chromium.installedapp.mojom;

class InstalledAppProvider_Internal {

  public static final org.chromium.mojo.bindings.Interface.Manager<
          InstalledAppProvider, InstalledAppProvider.Proxy>
      MANAGER =
          new org.chromium.mojo.bindings.Interface.Manager<
              InstalledAppProvider, InstalledAppProvider.Proxy>() {

            @Override
            public String getName() {
              return "blink.mojom.InstalledAppProvider";
            }

            @Override
            public int getVersion() {
              return 0;
            }

            @Override
            public Proxy buildProxy(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
              return new Proxy(core, messageReceiver);
            }

            @Override
            public Stub buildStub(org.chromium.mojo.system.Core core, InstalledAppProvider impl) {
              return new Stub(core, impl);
            }

            @Override
            public InstalledAppProvider[] buildArray(int size) {
              return new InstalledAppProvider[size];
            }
          };

  private static final int FILTER_INSTALLED_APPS_ORDINAL = 0;

  static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy
      implements InstalledAppProvider.Proxy {

    Proxy(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
      super(core, messageReceiver);
    }

    @Override
    public void filterInstalledApps(
        RelatedApplication[] relatedApps,
        org.chromium.url.mojom.Url manifestUrl,
        FilterInstalledApps_Response callback) {

      InstalledAppProviderFilterInstalledAppsParams _message =
          new InstalledAppProviderFilterInstalledAppsParams();

      _message.relatedApps = relatedApps;

      _message.manifestUrl = manifestUrl;

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      FILTER_INSTALLED_APPS_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new InstalledAppProviderFilterInstalledAppsResponseParamsForwardToCallback(callback));
    }
  }

  static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<InstalledAppProvider> {

    Stub(org.chromium.mojo.system.Core core, InstalledAppProvider impl) {
      super(core, impl);
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
        if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
        }
        if (!header.validateHeader(flags)) {
          return false;
        }
        switch (header.getType()) {
          case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants
              .RUN_OR_CLOSE_PIPE_MESSAGE_ID:
            return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                InstalledAppProvider_Internal.MANAGER, messageWithHeader);

          default:
            return false;
        }
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        System.err.println(e.toString());
        return false;
      }
    }

    @Override
    public boolean acceptWithResponder(
        org.chromium.mojo.bindings.Message message,
        org.chromium.mojo.bindings.MessageReceiver receiver) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
        if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
        }
        if (!header.validateHeader(flags)) {
          return false;
        }
        switch (header.getType()) {
          case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants
              .RUN_MESSAGE_ID:
            return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                getCore(), InstalledAppProvider_Internal.MANAGER, messageWithHeader, receiver);

          case FILTER_INSTALLED_APPS_ORDINAL:
            {
              InstalledAppProviderFilterInstalledAppsParams data =
                  InstalledAppProviderFilterInstalledAppsParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl()
                  .filterInstalledApps(
                      data.relatedApps,
                      data.manifestUrl,
                      new InstalledAppProviderFilterInstalledAppsResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          default:
            return false;
        }
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        System.err.println(e.toString());
        return false;
      }
    }
  }

  static final class InstalledAppProviderFilterInstalledAppsParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public RelatedApplication[] relatedApps;
    public org.chromium.url.mojom.Url manifestUrl;

    private InstalledAppProviderFilterInstalledAppsParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public InstalledAppProviderFilterInstalledAppsParams() {
      this(0);
    }

    public static InstalledAppProviderFilterInstalledAppsParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static InstalledAppProviderFilterInstalledAppsParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static InstalledAppProviderFilterInstalledAppsParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      InstalledAppProviderFilterInstalledAppsParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new InstalledAppProviderFilterInstalledAppsParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          {
            org.chromium.mojo.bindings.DataHeader si1 =
                decoder1.readDataHeaderForPointerArray(
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            result.relatedApps = new RelatedApplication[si1.elementsOrVersion];
            for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

              org.chromium.mojo.bindings.Decoder decoder2 =
                  decoder1.readPointer(
                      org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                          + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                      false);
              result.relatedApps[i1] = RelatedApplication.decode(decoder2);
            }
          }
        }
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
          result.manifestUrl = org.chromium.url.mojom.Url.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      if (this.relatedApps == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        org.chromium.mojo.bindings.Encoder encoder1 =
            encoder0.encodePointerArray(
                this.relatedApps.length,
                8,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i0 = 0; i0 < this.relatedApps.length; ++i0) {

          encoder1.encode(
              this.relatedApps[i0],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0,
              false);
        }
      }

      encoder0.encode(this.manifestUrl, 16, false);
    }
  }

  static final class InstalledAppProviderFilterInstalledAppsResponseParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public RelatedApplication[] installedApps;

    private InstalledAppProviderFilterInstalledAppsResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public InstalledAppProviderFilterInstalledAppsResponseParams() {
      this(0);
    }

    public static InstalledAppProviderFilterInstalledAppsResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static InstalledAppProviderFilterInstalledAppsResponseParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static InstalledAppProviderFilterInstalledAppsResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      InstalledAppProviderFilterInstalledAppsResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new InstalledAppProviderFilterInstalledAppsResponseParams(elementsOrVersion);
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
          {
            org.chromium.mojo.bindings.DataHeader si1 =
                decoder1.readDataHeaderForPointerArray(
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            result.installedApps = new RelatedApplication[si1.elementsOrVersion];
            for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

              org.chromium.mojo.bindings.Decoder decoder2 =
                  decoder1.readPointer(
                      org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                          + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                      false);
              result.installedApps[i1] = RelatedApplication.decode(decoder2);
            }
          }
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      if (this.installedApps == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        org.chromium.mojo.bindings.Encoder encoder1 =
            encoder0.encodePointerArray(
                this.installedApps.length,
                8,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i0 = 0; i0 < this.installedApps.length; ++i0) {

          encoder1.encode(
              this.installedApps[i0],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0,
              false);
        }
      }
    }
  }

  static class InstalledAppProviderFilterInstalledAppsResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final InstalledAppProvider.FilterInstalledApps_Response mCallback;

    InstalledAppProviderFilterInstalledAppsResponseParamsForwardToCallback(
        InstalledAppProvider.FilterInstalledApps_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            FILTER_INSTALLED_APPS_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
          return false;
        }

        InstalledAppProviderFilterInstalledAppsResponseParams response =
            InstalledAppProviderFilterInstalledAppsResponseParams.deserialize(
                messageWithHeader.getPayload());

        mCallback.call(response.installedApps);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class InstalledAppProviderFilterInstalledAppsResponseParamsProxyToResponder
      implements InstalledAppProvider.FilterInstalledApps_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    InstalledAppProviderFilterInstalledAppsResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(RelatedApplication[] installedApps) {
      InstalledAppProviderFilterInstalledAppsResponseParams _response =
          new InstalledAppProviderFilterInstalledAppsResponseParams();

      _response.installedApps = installedApps;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  FILTER_INSTALLED_APPS_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }
}

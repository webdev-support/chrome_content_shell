// BarcodeDetectionProvider_Internal.java is auto generated by mojom_bindings_generator.py, do not
// edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/shape_detection/public/mojom/barcodedetection_provider.mojom
//

package org.chromium.shape_detection.mojom;

class BarcodeDetectionProvider_Internal {

  public static final org.chromium.mojo.bindings.Interface.Manager<
          BarcodeDetectionProvider, BarcodeDetectionProvider.Proxy>
      MANAGER =
          new org.chromium.mojo.bindings.Interface.Manager<
              BarcodeDetectionProvider, BarcodeDetectionProvider.Proxy>() {

            @Override
            public String getName() {
              return "shape_detection.mojom.BarcodeDetectionProvider";
            }

            @Override
            public int getVersion() {
              return 0;
            }

            @Override
            public Proxy buildProxy(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
              return new Proxy(core, messageReceiver);
            }

            @Override
            public Stub buildStub(
                org.chromium.mojo.system.Core core, BarcodeDetectionProvider impl) {
              return new Stub(core, impl);
            }

            @Override
            public BarcodeDetectionProvider[] buildArray(int size) {
              return new BarcodeDetectionProvider[size];
            }
          };

  private static final int CREATE_BARCODE_DETECTION_ORDINAL = 0;

  private static final int ENUMERATE_SUPPORTED_FORMATS_ORDINAL = 1;

  static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy
      implements BarcodeDetectionProvider.Proxy {

    Proxy(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
      super(core, messageReceiver);
    }

    @Override
    public void createBarcodeDetection(
        org.chromium.mojo.bindings.InterfaceRequest<BarcodeDetection> receiver,
        BarcodeDetectorOptions options) {

      BarcodeDetectionProviderCreateBarcodeDetectionParams _message =
          new BarcodeDetectionProviderCreateBarcodeDetectionParams();

      _message.receiver = receiver;

      _message.options = options;

      getProxyHandler()
          .getMessageReceiver()
          .accept(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(CREATE_BARCODE_DETECTION_ORDINAL)));
    }

    @Override
    public void enumerateSupportedFormats(EnumerateSupportedFormats_Response callback) {

      BarcodeDetectionProviderEnumerateSupportedFormatsParams _message =
          new BarcodeDetectionProviderEnumerateSupportedFormatsParams();

      getProxyHandler()
          .getMessageReceiver()
          .acceptWithResponder(
              _message.serializeWithHeader(
                  getProxyHandler().getCore(),
                  new org.chromium.mojo.bindings.MessageHeader(
                      ENUMERATE_SUPPORTED_FORMATS_ORDINAL,
                      org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                      0)),
              new BarcodeDetectionProviderEnumerateSupportedFormatsResponseParamsForwardToCallback(
                  callback));
    }
  }

  static final class Stub
      extends org.chromium.mojo.bindings.Interface.Stub<BarcodeDetectionProvider> {

    Stub(org.chromium.mojo.system.Core core, BarcodeDetectionProvider impl) {
      super(core, impl);
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
        if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
        }
        if (!header.validateHeader(flags)) {
          return false;
        }
        switch (header.getType()) {
          case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants
              .RUN_OR_CLOSE_PIPE_MESSAGE_ID:
            return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                BarcodeDetectionProvider_Internal.MANAGER, messageWithHeader);

          case CREATE_BARCODE_DETECTION_ORDINAL:
            {
              BarcodeDetectionProviderCreateBarcodeDetectionParams data =
                  BarcodeDetectionProviderCreateBarcodeDetectionParams.deserialize(
                      messageWithHeader.getPayload());

              getImpl().createBarcodeDetection(data.receiver, data.options);
              return true;
            }

          default:
            return false;
        }
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        System.err.println(e.toString());
        return false;
      }
    }

    @Override
    public boolean acceptWithResponder(
        org.chromium.mojo.bindings.Message message,
        org.chromium.mojo.bindings.MessageReceiver receiver) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
        if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
          flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
        }
        if (!header.validateHeader(flags)) {
          return false;
        }
        switch (header.getType()) {
          case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants
              .RUN_MESSAGE_ID:
            return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                getCore(), BarcodeDetectionProvider_Internal.MANAGER, messageWithHeader, receiver);

          case ENUMERATE_SUPPORTED_FORMATS_ORDINAL:
            {
              BarcodeDetectionProviderEnumerateSupportedFormatsParams.deserialize(
                  messageWithHeader.getPayload());

              getImpl()
                  .enumerateSupportedFormats(
                      new BarcodeDetectionProviderEnumerateSupportedFormatsResponseParamsProxyToResponder(
                          getCore(), receiver, header.getRequestId()));
              return true;
            }

          default:
            return false;
        }
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        System.err.println(e.toString());
        return false;
      }
    }
  }

  static final class BarcodeDetectionProviderCreateBarcodeDetectionParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(24, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public org.chromium.mojo.bindings.InterfaceRequest<BarcodeDetection> receiver;
    public BarcodeDetectorOptions options;

    private BarcodeDetectionProviderCreateBarcodeDetectionParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public BarcodeDetectionProviderCreateBarcodeDetectionParams() {
      this(0);
    }

    public static BarcodeDetectionProviderCreateBarcodeDetectionParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static BarcodeDetectionProviderCreateBarcodeDetectionParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static BarcodeDetectionProviderCreateBarcodeDetectionParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      BarcodeDetectionProviderCreateBarcodeDetectionParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new BarcodeDetectionProviderCreateBarcodeDetectionParams(elementsOrVersion);
        {
          result.receiver = decoder0.readInterfaceRequest(8, false);
        }
        {
          org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
          result.options = BarcodeDetectorOptions.decode(decoder1);
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(this.receiver, 8, false);

      encoder0.encode(this.options, 16, false);
    }
  }

  static final class BarcodeDetectionProviderEnumerateSupportedFormatsParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 8;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(8, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];

    private BarcodeDetectionProviderEnumerateSupportedFormatsParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public BarcodeDetectionProviderEnumerateSupportedFormatsParams() {
      this(0);
    }

    public static BarcodeDetectionProviderEnumerateSupportedFormatsParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static BarcodeDetectionProviderEnumerateSupportedFormatsParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static BarcodeDetectionProviderEnumerateSupportedFormatsParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      BarcodeDetectionProviderEnumerateSupportedFormatsParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result = new BarcodeDetectionProviderEnumerateSupportedFormatsParams(elementsOrVersion);

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    }
  }

  static final class BarcodeDetectionProviderEnumerateSupportedFormatsResponseParams
      extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
        new org.chromium.mojo.bindings.DataHeader[] {
          new org.chromium.mojo.bindings.DataHeader(16, 0)
        };
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO =
        VERSION_ARRAY[0];
    public int[] supportedFormats;

    private BarcodeDetectionProviderEnumerateSupportedFormatsResponseParams(int version) {
      super(STRUCT_SIZE, version);
    }

    public BarcodeDetectionProviderEnumerateSupportedFormatsResponseParams() {
      this(0);
    }

    public static BarcodeDetectionProviderEnumerateSupportedFormatsResponseParams deserialize(
        org.chromium.mojo.bindings.Message message) {
      return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static BarcodeDetectionProviderEnumerateSupportedFormatsResponseParams deserialize(
        java.nio.ByteBuffer data) {
      return deserialize(
          new org.chromium.mojo.bindings.Message(
              data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static BarcodeDetectionProviderEnumerateSupportedFormatsResponseParams decode(
        org.chromium.mojo.bindings.Decoder decoder0) {
      if (decoder0 == null) {
        return null;
      }
      decoder0.increaseStackDepth();
      BarcodeDetectionProviderEnumerateSupportedFormatsResponseParams result;
      try {
        org.chromium.mojo.bindings.DataHeader mainDataHeader =
            decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        final int elementsOrVersion = mainDataHeader.elementsOrVersion;
        result =
            new BarcodeDetectionProviderEnumerateSupportedFormatsResponseParams(elementsOrVersion);
        {
          result.supportedFormats =
              decoder0.readInts(
                  8,
                  org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
                  org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
          {
            for (int i1 = 0; i1 < result.supportedFormats.length; ++i1) {
              BarcodeFormat.validate(result.supportedFormats[i1]);
            }
          }
        }

      } finally {
        decoder0.decreaseStackDepth();
      }
      return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
      org.chromium.mojo.bindings.Encoder encoder0 =
          encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

      encoder0.encode(
          this.supportedFormats,
          8,
          org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE,
          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
    }
  }

  static class BarcodeDetectionProviderEnumerateSupportedFormatsResponseParamsForwardToCallback
      extends org.chromium.mojo.bindings.SideEffectFreeCloseable
      implements org.chromium.mojo.bindings.MessageReceiver {
    private final BarcodeDetectionProvider.EnumerateSupportedFormats_Response mCallback;

    BarcodeDetectionProviderEnumerateSupportedFormatsResponseParamsForwardToCallback(
        BarcodeDetectionProvider.EnumerateSupportedFormats_Response callback) {
      this.mCallback = callback;
    }

    @Override
    public boolean accept(org.chromium.mojo.bindings.Message message) {
      try {
        org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
        org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
        if (!header.validateHeader(
            ENUMERATE_SUPPORTED_FORMATS_ORDINAL,
            org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
          return false;
        }

        BarcodeDetectionProviderEnumerateSupportedFormatsResponseParams response =
            BarcodeDetectionProviderEnumerateSupportedFormatsResponseParams.deserialize(
                messageWithHeader.getPayload());

        mCallback.call(response.supportedFormats);
        return true;
      } catch (org.chromium.mojo.bindings.DeserializationException e) {
        return false;
      }
    }
  }

  static class BarcodeDetectionProviderEnumerateSupportedFormatsResponseParamsProxyToResponder
      implements BarcodeDetectionProvider.EnumerateSupportedFormats_Response {

    private final org.chromium.mojo.system.Core mCore;
    private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
    private final long mRequestId;

    BarcodeDetectionProviderEnumerateSupportedFormatsResponseParamsProxyToResponder(
        org.chromium.mojo.system.Core core,
        org.chromium.mojo.bindings.MessageReceiver messageReceiver,
        long requestId) {
      mCore = core;
      mMessageReceiver = messageReceiver;
      mRequestId = requestId;
    }

    @Override
    public void call(int[] supportedFormats) {
      BarcodeDetectionProviderEnumerateSupportedFormatsResponseParams _response =
          new BarcodeDetectionProviderEnumerateSupportedFormatsResponseParams();

      _response.supportedFormats = supportedFormats;

      org.chromium.mojo.bindings.ServiceMessage _message =
          _response.serializeWithHeader(
              mCore,
              new org.chromium.mojo.bindings.MessageHeader(
                  ENUMERATE_SUPPORTED_FORMATS_ORDINAL,
                  org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                  mRequestId));
      mMessageReceiver.accept(_message);
    }
  }
}

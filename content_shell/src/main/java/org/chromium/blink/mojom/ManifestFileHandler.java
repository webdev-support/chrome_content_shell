// ManifestFileHandler.java is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/manifest/manifest.mojom
//

package org.chromium.blink.mojom;

import androidx.annotation.IntDef;

public final class ManifestFileHandler extends org.chromium.mojo.bindings.Struct {

  private static final int STRUCT_SIZE = 48;
  private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY =
      new org.chromium.mojo.bindings.DataHeader[] {
        new org.chromium.mojo.bindings.DataHeader(48, 0)
      };
  private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

  public static final class LaunchType {
    private static final boolean IS_EXTENSIBLE = false;

    @IntDef({LaunchType.SINGLE_CLIENT, LaunchType.MULTIPLE_CLIENTS})
    public @interface EnumType {}

    public static final int SINGLE_CLIENT = 0;
    public static final int MULTIPLE_CLIENTS = 1;
    public static final int MIN_VALUE = 0;
    public static final int MAX_VALUE = 1;

    public static boolean isKnownValue(int value) {
      return value >= 0 && value <= 1;
    }

    public static void validate(int value) {
      if (IS_EXTENSIBLE || isKnownValue(value)) return;
      throw new org.chromium.mojo.bindings.DeserializationException("Invalid enum value.");
    }

    public static int toKnownValue(int value) {
      return value;
    }

    private LaunchType() {}
  }

  public org.chromium.url.mojom.Url action;
  public org.chromium.mojo_base.mojom.String16 name;
  public ManifestImageResource[] icons;
  public java.util.Map<
          org.chromium.mojo_base.mojom.String16, org.chromium.mojo_base.mojom.String16[]>
      accept;
  public int launchType;

  private ManifestFileHandler(int version) {
    super(STRUCT_SIZE, version);
  }

  public ManifestFileHandler() {
    this(0);
  }

  public static ManifestFileHandler deserialize(org.chromium.mojo.bindings.Message message) {
    return decode(new org.chromium.mojo.bindings.Decoder(message));
  }

  /**
   * Similar to the method above, but deserializes from a |ByteBuffer| instance.
   *
   * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
   */
  public static ManifestFileHandler deserialize(java.nio.ByteBuffer data) {
    return deserialize(
        new org.chromium.mojo.bindings.Message(
            data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
  }

  @SuppressWarnings("unchecked")
  public static ManifestFileHandler decode(org.chromium.mojo.bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    decoder0.increaseStackDepth();
    ManifestFileHandler result;
    try {
      org.chromium.mojo.bindings.DataHeader mainDataHeader =
          decoder0.readAndValidateDataHeader(VERSION_ARRAY);
      final int elementsOrVersion = mainDataHeader.elementsOrVersion;
      result = new ManifestFileHandler(elementsOrVersion);
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
        result.action = org.chromium.url.mojom.Url.decode(decoder1);
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
        result.name = org.chromium.mojo_base.mojom.String16.decode(decoder1);
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
        {
          org.chromium.mojo.bindings.DataHeader si1 =
              decoder1.readDataHeaderForPointerArray(
                  org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
          result.icons = new ManifestImageResource[si1.elementsOrVersion];
          for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

            org.chromium.mojo.bindings.Decoder decoder2 =
                decoder1.readPointer(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                    false);
            result.icons[i1] = ManifestImageResource.decode(decoder2);
          }
        }
      }
      {
        org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
        {
          decoder1.readDataHeaderForMap();
          org.chromium.mojo_base.mojom.String16[] keys0;
          org.chromium.mojo_base.mojom.String16[][] values0;
          {
            org.chromium.mojo.bindings.Decoder decoder2 =
                decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
            {
              org.chromium.mojo.bindings.DataHeader si2 =
                  decoder2.readDataHeaderForPointerArray(
                      org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
              keys0 = new org.chromium.mojo_base.mojom.String16[si2.elementsOrVersion];
              for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {

                org.chromium.mojo.bindings.Decoder decoder3 =
                    decoder2.readPointer(
                        org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                            + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2,
                        false);
                keys0[i2] = org.chromium.mojo_base.mojom.String16.decode(decoder3);
              }
            }
          }
          {
            org.chromium.mojo.bindings.Decoder decoder2 =
                decoder1.readPointer(
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                    false);
            {
              org.chromium.mojo.bindings.DataHeader si2 =
                  decoder2.readDataHeaderForPointerArray(keys0.length);
              values0 = new org.chromium.mojo_base.mojom.String16[si2.elementsOrVersion][];
              for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {

                org.chromium.mojo.bindings.Decoder decoder3 =
                    decoder2.readPointer(
                        org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                            + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2,
                        false);
                {
                  org.chromium.mojo.bindings.DataHeader si3 =
                      decoder3.readDataHeaderForPointerArray(
                          org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                  values0[i2] = new org.chromium.mojo_base.mojom.String16[si3.elementsOrVersion];
                  for (int i3 = 0; i3 < si3.elementsOrVersion; ++i3) {

                    org.chromium.mojo.bindings.Decoder decoder4 =
                        decoder3.readPointer(
                            org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                                + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i3,
                            false);
                    values0[i2][i3] = org.chromium.mojo_base.mojom.String16.decode(decoder4);
                  }
                }
              }
            }
          }
          result.accept =
              new java.util.HashMap<
                  org.chromium.mojo_base.mojom.String16, org.chromium.mojo_base.mojom.String16[]>();
          for (int index0 = 0; index0 < keys0.length; ++index0) {
            result.accept.put(keys0[index0], values0[index0]);
          }
        }
      }
      {
        result.launchType = decoder0.readInt(40);
        ManifestFileHandler.LaunchType.validate(result.launchType);
        result.launchType = ManifestFileHandler.LaunchType.toKnownValue(result.launchType);
      }

    } finally {
      decoder0.decreaseStackDepth();
    }
    return result;
  }

  @SuppressWarnings("unchecked")
  @Override
  protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    org.chromium.mojo.bindings.Encoder encoder0 =
        encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

    encoder0.encode(this.action, 8, false);

    encoder0.encode(this.name, 16, false);

    if (this.icons == null) {
      encoder0.encodeNullPointer(24, false);
    } else {
      org.chromium.mojo.bindings.Encoder encoder1 =
          encoder0.encodePointerArray(
              this.icons.length,
              24,
              org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
      for (int i0 = 0; i0 < this.icons.length; ++i0) {

        encoder1.encode(
            this.icons[i0],
            org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0,
            false);
      }
    }

    if (this.accept == null) {
      encoder0.encodeNullPointer(32, false);
    } else {
      org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(32);
      int size0 = this.accept.size();
      org.chromium.mojo_base.mojom.String16[] keys0 =
          new org.chromium.mojo_base.mojom.String16[size0];
      org.chromium.mojo_base.mojom.String16[][] values0 =
          new org.chromium.mojo_base.mojom.String16[size0][];
      int index0 = 0;
      for (java.util.Map.Entry<
              org.chromium.mojo_base.mojom.String16, org.chromium.mojo_base.mojom.String16[]>
          entry0 : this.accept.entrySet()) {
        keys0[index0] = entry0.getKey();
        values0[index0] = entry0.getValue();
        ++index0;
      }

      {
        org.chromium.mojo.bindings.Encoder encoder2 =
            encoder1.encodePointerArray(
                keys0.length,
                org.chromium.mojo.bindings.DataHeader.HEADER_SIZE,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i1 = 0; i1 < keys0.length; ++i1) {

          encoder2.encode(
              keys0[i1],
              org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                  + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
              false);
        }
      }

      {
        org.chromium.mojo.bindings.Encoder encoder2 =
            encoder1.encodePointerArray(
                values0.length,
                org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                    + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE,
                org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        for (int i1 = 0; i1 < values0.length; ++i1) {

          if (values0[i1] == null) {
            encoder2.encodeNullPointer(
                org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                    + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                false);
          } else {
            org.chromium.mojo.bindings.Encoder encoder3 =
                encoder2.encodePointerArray(
                    values0[i1].length,
                    org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                        + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1,
                    org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i2 = 0; i2 < values0[i1].length; ++i2) {

              encoder3.encode(
                  values0[i1][i2],
                  org.chromium.mojo.bindings.DataHeader.HEADER_SIZE
                      + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2,
                  false);
            }
          }
        }
      }
    }

    encoder0.encode(this.launchType, 40);
  }
}
